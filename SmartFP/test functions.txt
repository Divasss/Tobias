
8874 holy item

	
	//Should Healer 2 cleanse the first fit?
	if not skipFirstFit
	and not ShouldICastSpell_Healers(1016) then begin
		skipFirstFit := true;
	end;
	
	if not skipSecondFit
	and madeReSearch
	and not ShouldICastSpell_Healers(1016) then begin
		skipSecondFit := true;
	end;
		
	if not skipFirstFit then begin
		if IsAnyHealer_CastingSpellById_OnTargetChar(1016, oLastTarget) then begin
			skipFirstFit := true;
		end;
	end else if not (skipSecondFit) then begin
		if IsAnyHealer_CastingSpellById_OnTargetChar(1016, oLastTarget) then begin
			skipSecondFit := true;
		end;
	end;
	
	if skipSecondFit and not madeSecondReSearh and madeReSearch then begin
		madeSecondReSearh := true;
		secondExceptionName := oLastTarget.Name;
		goto RestartRezTargetSearch;
	end;
	
	if skipFirstFit and not madeReSearch then begin
		madeReSearch := true;
		exceptionName := oLastTarget.Name;
		goto RestartRezTargetSearch;
	end;



function PullMobs: Boolean;
var
oTarget: Tl2Live;
begin
	result := false;
	oTarget := GetTarget_MostClustered_WithinRange_NonAgroed_InZone(900);
	if (oTarget = nil) or (oTarget = (user as tl2live)) then exit;
	if not (User.Target = oTarget) then begin
		Engine.CancelTarget();
		Engine.SetTarget(oTarget);
	end;
	
	result := Action_UseSingleSkill_Force;
end;


procedure AutoSummoner;
var
ma : Tl2Char;
counter: Integer;
setPet: Boolean;
begin
	Print('Auto Summoner Started.');
	counter := 0;
	while true do begin
		Delay(300);
		
		counter := counter + 1;
		if (counter mod 3 = 0) then begin
			setPet := true;
			counter := 0;
		end else begin
			setPet := false;
		end;
		
		
		VoiceCommand_Listen;
		if DoActions or TotalPause or (User.Dead) then begin
			Print('We are total paused');
			Continue;
		end;
		PlayersNearby := IsOtherPlayersNearby(3000);
		SetPoint_PartyCenter;
		SetPvpStance;
		
		//SetPoint_PartyCenter;
		if (DiscreteMode) and (PlayersNearby) then Continue;
		
		if (IsUnderAttack) and AA_BringMobsMode then begin
			if Action_PullMobs then continue;
		end;
	
	
		//	Before anything else, check our distance to party center
		//	As we shouldn't do anything unless party is close
		if CheckPartyDistance then Continue;
		
		//Combat Related
		if (IsUnderAttack) then begin
		(*	
			//	time to aoe?
			if (IsTime_ToAoe) and (has summon 79) then begin
				
				//So here we are within 150 range of the aoe point.
				if (PvpLoaded) then begin
					//AOE Pvp
					if (SetTarget_MostClustered_Pvp) then
						Continue;
					
				end else begin
					//AOE PVE
					if (SetTarget_MostClustered_Pve) then
						Continue;
				end;
			
			//	if not aoe, then we single target!
			end else begin
		*)	
				if (PvpLoaded) then begin
					//Single Target Pvp
				(*	if setPet then begin
						if 79 summon and summon aoe ready then begin
							check pet mana, range, not dead etc..
							find center target
							use summon aoe on target
							if aoe used, delay(100) and go on to initialize pet attack
						end;
					
						ma := GetTarget_MainAssist;
						if (ma = nil) or (ma = user) or (ma.target = nil) then begin
							if (SetTarget_Best_Pvp) then begin
								//Pet Attack!
								Continue;
							end;
						end else if not(ma.target = nil) then begin
							Engine.CancelTarget();
							Engine.SetTarget(ma.target);
							//Pet Attack! 
							Continue;
						end;
					end else begin
						//If it is not time to attack with pet
						//Do warrior bane
						//Mass surrender to water
					
					end;
					//Attack with pet
						*)
				end else begin
					//Singe Target Pve
					ma := GetTarget_MainAssist;
					if (ma = nil) or (ma = user) or (ma.target = nil) then begin
						if (SetTarget_NearestAgroed_Pve) then begin
							Continue;
						end else begin
							Print('Warning: SetTarget_NearestAgroed_Pve returned false.');
							WriteError('Warning: SetTarget_NearestAgroed_Pve returned false.');
						end;
					end else if not(ma.target = nil) then begin
						if not (User.Target = ma.target) then begin
							Engine.CancelTarget();
							Engine.SetTarget(ma.target);
						end;
						Continue;
					end;
				end;
			
			//end;
			
			
		//Non Combat Related
		end else begin
		
			
			
		end;
	end;
end;

function Action_UseSingleSkill_Force: Boolean;
var
skillId, castRange: Integer;
oTarget: Tl2Live;
begin 
	result := false;
	castRange := 900;
	skillId := 0;

	if HasSkill_Ready(1230) then 
		skillId := 1230
	else if HasSkill_Ready(1235) then 
		skillId := 1235
	else if HasSkill_Ready(1239) then 
		skillId := 1239
	else if HasSkill_Ready(1148) then 
		skillId := 1148
	else if HasSkill_Ready(1530) then 
		skillId := 1530
	else if HasSkill_Ready(1436) then 
		skillId := 1436
	else if HasSkill_Ready(1245) then 
		skillId := 1245
	else if HasSkill_Ready(1175) then 
		skillId := 1175;
		
	if (skillId = 0) then exit;
		
	if (skillId = 1175) then
		castRange := 750
	else if (skillId = 1436) then
		castRange := 700	//Soul of Pain
	end else begin
		castRange := 900;
	end;
		
	if (castRange > 100) then castRange := castRange - 50; 
		
	oTarget := User.Target;
	if (oTarget = nil) or (oTarget.Name = '') or (not oTarget.Valid) then exit;
	if (User.DistTo(oTarget) > castRange) then begin
		MoveToTarget_Timeout(oTarget, castRange, 2000);
	end;
	if (User.DistTo(oTarget) > castRange) then begin
		result := true;
		exit;
	end;
	if (HasSkill_Ready(skillId) then
		result := Engine.DUseSkill(skillId, True, False);
end;

function SetTarget_Cleanse_v2: Boolean;
//checked
var
oSkill: Tl2Skill;
oTarget: Tl2Char;
begin
	result := false;
	
	oTarget := GetTarget_Cleanse;
  
	if (oTarget = nil) or (not oTarget.Valid) or (oTarget.Name = '') then exit;
  
	if not (User.Target = oTarget) then
		Engine.SetTarget(oTarget);
	result := true;
end;

function GetTarget_Cleanse_v2: Tl2Char;
var 
i, j, nLastRange, nCurRange, nCurDebuffState, nLastDebuffState, nCurClassImportance, nLastClassImportance : Integer;
oCurTarget, oLastTarget, cchar, oHealer: Tl2Char;
skipFirstFit, madeReSearch: Boolean;
label
	RestartTargetSearch;
begin
	skipFirstFit := false;
	madeReSearch := false;

	RestartTargetSearch:
	
	oLastTarget := nil;
	nLastClassImportance := -1;
	nLastDebuffState := 0;
	//oLastTarget := User;
	nLastRange := 10000;
	oHealer := User;
	////////////
	
	//Should Healer 2 cleanse the first fit?
	if not skipFirstFit
	and (User.Name = GetName_Healer1)
	and CharList.ByName(GetName_Healer2, oHealer)
	and (IsTarget_GoodState_Party(oHealer, 600))
	and (IsSkillReady_OtherBotChar(1016, oHealer.Name)) then begin
		skipFirstFit := true;
	end;
	
	
	
	
	for i := 0 to Party.Chars.Count do begin //Not -1 cuz we are using last number to check ourself
		if (i = Party.Chars.Count) then begin
			oCurTarget := User;
			if not (IsTarget_ValidAndVisible_Char(oCurTarget)) then Continue;
		end else begin 
			//for any iteration BUT the last, oCurTarget := Party.Chars.Items(i);
			oCurTarget := Party.Chars.Items(i);
		end;
		if (oCurTarget = nil) then continue;
		
		
		nCurDebuffState := IsTarget_Debuffed_GetState(oCurTarget);
		nCurClassImportance := GetClassValue_PartyImportance(oCurTarget.ClassID);
		nCurRange := User.DistTo(oCurTarget);

		if (nCurRange > 1000) 
		or (nCurDebuffState = 0)then Continue;
    
		//Worse Debuff?
		if (nCurDebuffState > nLastDebuffState) then begin
			oLastTarget := oCurTarget;
			nLastClassImportance := nCurClassImportance;
			nLastDebuffState := nCurDebuffState;
			nLastRange := nCurRange;
		end else if (nCurDebuffState = nLastDebuffState) then begin
	
			//More Important Class?	
			if (nCurClassImportance > nLastClassImportance) then begin
				oLastTarget := oCurTarget;
				nLastClassImportance := nCurClassImportance;
				nLastDebuffState := nCurDebuffState;
				nLastRange := nCurRange;
			end else if (nCurClassImportance = nLastClassImportance) then begin
	  
				//Closer Target?
				if (nCurRange < nLastRange) then begin
					oLastTarget := oCurTarget;
					nLastClassImportance := nCurClassImportance;
					nLastDebuffState := nCurDebuffState;
					nLastRange := nCurRange;
				end;
			end;
		end;
	end;
	
	
	if not skipFirstFit
	and not (oHealer = nil) 
	and not (oHealer = User) 
	and (oHealer.Target = oLastTarget)
	and (oHealer.Cast.Id = 1016) and (oHealer.Cast.EndTime > 0) then begin
		skipFirstFit := true;
	end;
	
	if skipFirstFit and not madeReSearch then begin
		madeReSearch := true;
		goto RestartTargetSearch;
	end;
	
	result := oLastTarget;
end;



	(*
	if not skipSecondFit
	and not (oHealer = nil) 
	and not (oHealer = User) 
	and (oHealer.Target = oLastTarget)
	and (oHealer.Cast.Id = 1016) and (oHealer.Cast.EndTime > 0) then begin
		skipSecondFit := true;
	end;
	
	if not skipFirstFit
	and not (oEe = nil) 
	and not (oEe = User) 
	and (oEe.Target = oLastTarget)
	and (oEe.Cast.Id = 1016) and (oEe.Cast.EndTime > 0) then begin
		skipFirstFit := true;
	end; *)
	
	//EE should skip target if anyone is rezzing that target.
	if (User.Name = GetName_Ee) and not skipFirstFit then begin
		if IsTargetByName_CastingSpellById_OnTargetChar(GetName_Healer1, 1016, oLastTarget) then begin
			skipFirstFit := true;
		end;
		if not skipFirstFit 
		and IsTargetByName_CastingSpellById_OnTargetChar(GetName_Healer2, 1016, oLastTarget) then begin
			skipFirstFit := true;
		end;
	end else if (User.Name = GetName_Ee) and not skipSecondFit then begin
		if IsTargetByName_CastingSpellById_OnTargetChar(GetName_Healer1, 1016, oLastTarget) then begin
			skipSecondFit := true;
		end;
		if not skipSecondFit 
		and IsTargetByName_CastingSpellById_OnTargetChar(GetName_Healer2, 1016, oLastTarget) then begin
			skipSecondFit := true;
		end;
	end;//End of EE target skipping
	
	//Heal1 should skip target if anyone is rezzing that target.
	if (User.Name = GetName_Healer1) and not skipFirstFit then begin
		if IsTargetByName_CastingSpellById_OnTargetChar(GetName_Ee, 1016, oLastTarget) then begin
			skipFirstFit := true;
		end;
		if not skipFirstFit 
		and IsTargetByName_CastingSpellById_OnTargetChar(GetName_Healer2, 1016, oLastTarget) then begin
			skipFirstFit := true;
		end;
	end else if (User.Name = GetName_Healer1) and not skipSecondFit then begin
		if IsTargetByName_CastingSpellById_OnTargetChar(GetName_Ee, 1016, oLastTarget) then begin
			skipSecondFit := true;
		end;
		if not skipSecondFit 
		and IsTargetByName_CastingSpellById_OnTargetChar(GetName_Healer2, 1016, oLastTarget) then begin
			skipSecondFit := true;
		end;
	end;//End of Heal1 target skipping	
	
	//Heal2 should skip target if anyone is rezzing that target.
	if (User.Name = GetName_Healer2) and not skipFirstFit then begin
		if IsTargetByName_CastingSpellById_OnTargetChar(GetName_Ee, 1016, oLastTarget) then begin
			skipFirstFit := true;
		end;
		if not skipFirstFit 
		and IsTargetByName_CastingSpellById_OnTargetChar(GetName_Healer1, 1016, oLastTarget) then begin
			skipFirstFit := true;
		end;
	end else if (User.Name = GetName_Healer2) and not skipSecondFit then begin
		if IsTargetByName_CastingSpellById_OnTargetChar(GetName_Ee, 1016, oLastTarget) then begin
			skipSecondFit := true;
		end;
		if not skipSecondFit 
		and IsTargetByName_CastingSpellById_OnTargetChar(GetName_Healer1, 1016, oLastTarget) then begin
			skipSecondFit := true;
		end;
	end;//End of Heal2 target skipping	




procedure AutoOverlord;
var
ma : Tl2Char;
begin
	Print('Auto Overlord Started.');
	//CURRENTLY identical to AutoWarlord
	while true do begin
		Delay(750);
		
		VoiceCommand_Listen;
		if DoActions or TotalPause or (User.Dead) then begin
			Print('We are total paused');
			Continue;
		end;
		
		
		PlayersNearby := IsOtherPlayersNearby(3000);
		SetPvpStance;
		SetPoint_PartyCenter;
		
		if (DiscreteMode) and (PlayersNearby) then Continue;
	
		//	Before anything else, check our distance to party center
		//	As we shouldn't do anything unless party is close
		if CheckPartyDistance then Continue;
		
		//Combat Related
		if (IsUnderAttack) then begin
			SetPoint_AoePosition;
			
			//	time to aoe?
			if (IsTime_ToAoe) and (IsAoePoint_Valid) then begin
				SetDistance_AoePointDistance;
				
				if (AOE_PT_DIST > 150) then begin
					MoveTo_AoePoint; 
					Continue; 
				end;
				
				//So here we are within 150 range of the aoe point.
				if (PvpLoaded) then begin
					//AOE Pvp
					if (SetTarget_Nearest_Pvp) then
						Continue;
					
				end else begin
					//AOE PVE
					if (SetTarget_Nearest_Pve) then
						Continue;
				end;
			
			//	if not aoe, then we single target!
			end else begin
			
				if (PvpLoaded) then begin
					//Single Target Pvp
					ma := GetTarget_MainAssist;
					if (ma = nil) or (ma = user) or (ma.target = nil) then begin
						if (SetTarget_Best_Pvp) then begin
							Continue;
						end;
					end else if not(ma.target = nil) then begin
						if not (User.Target = ma.target) then begin
							Engine.CancelTarget();
							Engine.SetTarget(ma.target);
						end;
						Continue;
					end;
						
				end else begin
					//Singe Target Pve
					if (SetTarget_NearestAgroed_Pve) then
						Continue;
				end;
			
			end;
			
			
		//Non Combat Related
		end else begin
		
			
			
		end;

	end;
end;

function CheckSwsBd_Aoe: Boolean;
begin
	result := false;
	if not IsTime_ToAoe then exit;
	
	SetPoint_AoePosition;
	if not IsAoePoint_Valid then exit;
	
	SetDistance_AoePointDistance;
	if (AOE_PT_DIST > 100) then begin
		MoveTo_AoePoint; 
		result := true; 
		exit;
	end;
	
	if (PvpLoaded) then begin
		if HasSkills_Ready_Any(407, 98, 408) and (User.Mp > 20) then begin
			if (SetTarget_Nearest_Pvp) then begin
				//Use Aoe Skill
				if HasSkill_Ready(407) then begin
					result := Engine.DUseSkill(407, True, False);
					exit;
				end else if HasSkill_Ready(408) then begin
					result := Engine.DUseSkill(408, True, False);
					exit;
				end;

			end;
		end;
	end else begin
		if (SetTarget_Nearest_Pve) then begin
			//Use Aoe Skill
			if HasSkills_Ready_Any(407, 98, 408) and (User.Mp > 20) then begin
				
				if HasSkill_Ready(407) then begin
					result := Engine.DUseSkill(407, True, False);
					exit;
				end else if HasSkill_Ready(408) then begin
					result := Engine.DUseSkill(408, True, False);
					exit;
				end;
				
			end;
		end;
	end;
end;
			//	time to aoe?
			if (IsTime_ToAoe) and (IsAoePoint_Valid) then begin
				SetDistance_AoePointDistance;
				
				if (AOE_PT_DIST > 100) then begin
					MoveTo_AoePoint; 
					Continue; 
				end;
				
				//So here we are within 150 range of the aoe point.
				if (PvpLoaded) then begin
					//AOE Pvp
					if (SetTarget_Nearest_Pvp) then
						Continue;
					
				end else begin
					//AOE PVE
					if (SetTarget_Nearest_Pve) then
						Continue;
				end;


