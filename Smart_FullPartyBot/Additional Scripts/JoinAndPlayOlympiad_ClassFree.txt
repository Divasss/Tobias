uses
SysUtils, Classes;
var
Match_Ended, Match_Started: Boolean;
sX, sY, sZ: Integer;
/////////////////////////////////////////// Classes


function IsClass_Sorc(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		10 .. 12, 94: result := true;
	end;	
end;
function IsClass_Necro(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		13, 95: result := true;
	end;	
end;
function IsClass_Sps(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		25 .. 27, 103: result := true;
	end;	
end;
function IsClass_Sph(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		38 .. 40, 110: result := true;
	end;	
end;

function IsClass_Wl(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		0, 1, 3, 89: result := true;
	end;	
end;
function IsClass_Destro(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		44, 45, 46, 113: result := true;
	end;	
end;
function IsClass_Tyrant(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		44, 47, 48, 114: result := true;
	end;	
end;

function IsClass_Glad(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		0, 1, 2, 88: result := true;
	end;	
end;

function IsClass_Ol(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		49 .. 51, 115: result := true;
	end;	
end;
function IsClass_Wc(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		52, 116: result := true;
	end;	
end;
function IsClass_Bp(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		15, 16, 97: result := true;
	end;	
end;

function IsClass_Ee(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		29, 30, 105: result := true;
	end;	
end;
function IsClass_Se(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		42, 43, 112: result := true;
	end;	
end;
function IsClass_Slh(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		125, 126, 128, 129, 132, 133: result := true;
	end;	
end;
function IsClass_Trick(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		124, 126, 130, 134: result := true;
	end;	
end;
function IsClass_Judi(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		135, 136: result := true;
	end;	
end;


function IsClass_FighterType(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		0 .. 9, 88 .. 93, 18 .. 24, 99 .. 102, 31 .. 37, 106 .. 109, 
		44 .. 48, 113, 114, 53 .. 57, 117, 118, 123 .. 127, 130, 131, 134: result := true;
	end;	
 
end;


function IsClass_MeleeDpsType(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		0 .. 3, 7, 8, 88, 89, 93, 18, 22, 23, 101, 31, 35, 36, 108, 44 .. 48, 113, 114, 123 .. 127, 131: result := true;
	end;	
end;



function IsClass_MysticType(classID: Integer): Boolean;
begin
	result := not IsClass_FighterType(classID);
end;
function IsClass_RangedDDType(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		9 .. 13, 92, 94, 95, 24 .. 27, 102, 103, 37 .. 41, 109 .. 111, 
		128 .. 130, 132 .. 134: result := true;
	end;	
end;
function IsClass_Archer(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		9, 92, 24, 102, 37, 109: result := true;
	end;	
end;
function IsClass_OrcMystic(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		49 .. 52, 115, 116: result := true;
	end;	
end;
function IsClass_SwsBd(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		18, 19, 21, 100, 31, 32, 34, 107: result := true;
	end;	
end;
function IsClass_Sws(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		18, 19, 21, 100: result := true;
	end;	
end;
function IsClass_Bd(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		31, 32, 34, 107: result := true;
	end;	
end;

function IsClass_Summoner(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		14, 96, 28, 104, 41, 111: result := true;
	end;	
end;

function IsClass_Spoiler(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		54, 55, 117: result := true;
	end;	
end;



function IsClass_Tank(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		4, 5, 6, 90, 91, 19, 20, 99, 32, 33, 106: result := true;
	end;	
	//Human, Elf, DarkElf Tank Classes level 20-85
end;


function IsClass_Dagger(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		8, 93, 23, 101, 36, 108, 55, 117: result := true;
	end;
end;


function IsClass_Gh(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		36, 108: result := true;
	end;
end;

function IsClass_Hk(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		6, 91: result := true;
	end;	
end;



function IsClass_Pala(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		5, 90: result := true;
	end;	
end;
function IsClass_Tk(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		20, 99: result := true;
	end;	
end;

function IsClass_Sk(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		33, 106: result := true;
	end;	
end;
function IsClass_Db(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		125, 127, 131: result := true;
	end;	
end;

function IsClass_FighterCaster: Boolean;
begin
	result := false;
	if IsClass_Sk(User.ClassId)
	or IsClass_Hk(User.ClassId)
	or IsClass_Pala(User.ClassId) then begin
		result := true;
	end;
end;


////////////////////////////////////////// END Classes


function GetSeconds: Word;
var
	myDate : TDateTime;
	myHour, myMin, mySec, myMilli : Word;                   
begin
	myDate := now;
	DecodeTime(myDate, myHour, myMin, mySec, myMilli);
	result := mySec;
end;

function WaitForEntry: Boolean;
var
startTime, tickCount, maxTime, timePassed: Cardinal;
x, y, z: Integer;
begin
	result := false;
	maxTime := 160000; //160 seconds. 120 sec for entry.
	startTime := GetTickCount;
	x := User.X;
	y := User.Y;
	z := User.Z;
	while true do begin
	
		Delay(1000);
		//too long time passed?
		tickCount := GetTickCount;
		if (tickCount >= startTime) then begin
			timePassed := tickCount - startTime;
			if (timePassed >= maxTime) then begin
				print('Time out, leave!');
				exit;
			end;
		end else begin
			Print('Time Error, Exit');
			exit;
		end;
		
		if (User.DistTo(x, y, z) > 5000) then begin
			Print('We have teleported and entered olympiad');
			result := true;
			Delay(10000);
			sX := User.X;
			sY := User.Y;
			sZ := User.Z;
			exit;
		end;
	end;
	
end;

function BuffUp_Olympiad(num: Integer): Boolean;
var
oTarget: Tl2Live;
begin
	result := false;
	if (num > 50) then exit;
	oTarget := NpcList.Items(0);
	if (oTarget = nil) or not oTarget.Valid then begin
		Print('Cannot find olympiad manager buffer, exit!');
	end;
	
	if (User.DistTo(oTarget) > 500) then begin
		Print('Cannot find olympiad manager buffer, exit!, or he is too far');
		Engine.SetTarget(oTarget);
		Delay(1000);
		result := BuffUp_Olympiad(num + 1);
		exit;
	end;
	
	if (Engine.SetTarget(oTarget)) then begin
		if (Engine.DlgOpen) then begin
			if IsClass_FighterType(User.ClassId) then TakeBuffs_OlympiadFighter
			else TakeBuffs_OlympiadMage;
		end;
	end;
	Delay(1000);
	Engine.MoveToTarget(200);
	Engine.FaceControl(0, true);
	Delay(1000);
	Engine.FaceControl(0, false);
	BuffUp_Olympiad_SelfBuffs;
end;

function TakeBuffs_OlympiadFighter: Boolean;
begin
	result := true;
	Engine.DlgSel('Haste');
	Delay(800);
	Engine.DlgSel('Wind Walk');
	Delay(800);
	Engine.DlgSel('Might');
	Delay(800);
	Engine.DlgSel('Death Whisper');
	Delay(800);
	if IsClass_FighterCaster then begin
		Engine.DlgSel('Acumen');
		Delay(800);
	end else begin
		Engine.DlgSel('Berserker Spirit');
		Delay(800);
	end;
end;
function TakeBuffs_OlympiadMage: Boolean;
begin
	result := true;
	Engine.DlgSel('Wind Walk');
	Delay(800);
	Engine.DlgSel('Acumen');
	Delay(800);
	Engine.DlgSel('Empower');
	Delay(800);
	Engine.DlgSel('Concentration');
	Delay(800);
	Engine.DlgSel('Berserker Spirit');
	Delay(800);
end;

function IHaveBuff(buffId: Integer): Boolean;
var
oBuff: Tl2Buff;
begin
	result := User.Buffs.ById(buffId, oBuff);
end;

function IHaveSkill_Ready(skillID: Integer): Boolean; Overload;
var
skill: Tl2Skill;
begin
	result := false;
	if (SkillList.ById(skillID, skill))
	and not skill.Disabled 
	and not skill.Passive then begin
		if (skill.EndTime <= 0) or (skill.EndTime > 1000000) then begin
			result := true;
		end;
	end;
end;

function BuffUp_Olympiad_SelfBuffs: Boolean;
begin
	result := false;
	
	CheckBuff(1444); //Pride of Kamael
	CheckBuff(482);		// Furious Soul
	CheckBuff(94); // Rage

end;


function MaintainCombatSelfBuffs_Olympiad: Boolean;
begin
	result := false;
	
	CheckBuff(1444); //Pride of Kamael
	CheckBuff(482);		// Furious Soul
	CheckBuff(94); // Rage
	CheckBuff(337); // Arcane Power
	CheckBuff(1520); // Inquisitor
	CheckBuff(1521); // Inquisitor
	CheckBuff(1522); // Inquisitor
	
end;

function AttackEnemyTarget: Boolean;
begin
	result := false;
	if CheckUseAttackSkill(1523) //Divine Punishment
	or CheckUseAttackSkill(1230) //Prominence
	or CheckUseAttackSkill(1235) //Hydro Blast
	or CheckUseAttackSkill(1245) //Steal Essence
	or CheckUseAttackSkill(1435) //Death Mark
	or CheckUseAttackSkill(1436) //Soul of Pain
	or CheckUseAttackSkill(1438) //Annihilation Circle
	or CheckUseAttackSkill(1516) //Soul Strike
	or CheckUseAttackSkill(1512) //Soul Vortex
	or CheckUseAttackSkill(1148) //Soul Vortex
	then begin
		result := true;
	end else begin
		Engine.Attack(50);
		result := false;
	end;
end;

function CheckBuff(skillId: Integer): Boolean;
begin
	if IHaveSkill_Ready(skillId) and not (IHaveBuff(skillId)) then begin
		Engine.SetTarget(User);
		Delay(100);
		Engine.UseSkill(skillId);
	end;
end;

function CheckUseAttackSkill(skillId: Integer): Boolean;
begin
	result := false;
	if IHaveSkill_Ready(skillId) then begin
		Engine.DUseSkill(skillId, true, false);
		result := true;
	end;
end;

function GetEnemyPlayer(index: Integer = 0): Tl2Char;
var
oTarget: Tl2Char;
begin
	result := User;
	oTarget := Charlist.Items(index);
	if (oTarget.X = sX) and (oTarget.Y = sY) and (oTarget.Z = sZ) then begin
		result := GetEnemyPlayer(index + 1);
		exit;
	end;
	if not (Charlist.Items(index).Dead) and (CharList.Items(index).Valid) and (not (CharList.Items(index) = nil)) then begin
		result := CharList.Items(index);
	end;
end;

function GetControlNum(sName: string): Integer;
var
i: Integer;
control: Tl2Control;
begin
	result := -1;
	i := 0;
	control := GetControlByIndex(i);
	while Assigned(control) do begin
		if (control.GetUser.Name = sName) then begin
			result := i;
			exit;
		end;
		i := i + 1;
		control := GetControlByIndex(i);
	end;
end;


procedure Detect_SystemMessages;
var
id, p: cardinal;
begin
	Match_Ended := false;
	Match_Started := false;
	Print('Detect_SystemMessages: Started procedure.');
	while true do begin
		if Match_Ended and Match_Started then exit;
		Engine.WaitAction([laSysMsg], id, p);
		if (id = 1496) or (id = 283) then begin
			Match_Started := true;
		end else if (id = 1497) or (id = 284) or (id = 1657) or (id = 1658) then begin
			Match_Ended := true;
		end;
		Delay(100);
	end;
end;



var
secs, count, x, y, z, oX, oY, oZ, myNum, enemyNum: Integer;
enemy: Tl2Char;
control: Tl2Control;
// 14,2   -1,9 = 12,3

               //  8,7 - 1,9 = 6,8
               //          1,6
               
              //   6,5 -> 4,6 == 1,9
begin
	Engine.LoadConfig('Oly1.xml');
	Engine.SetTarget(31688);
	Delay(1000);
	Engine.DlgOpen();
	Delay(1000);
	Engine.DlgSel(1);
	Delay(1000);
	Engine.DlgSel(2);
	Delay(1000);

	while true do begin
		secs := GetSeconds;
		while not ((secs = 28) or (secs = 58)) do begin
			delay(20);
			secs := GetSeconds;
		end;
		Print('Time passed: sec = ' + IntToStr(GetSeconds));
		//Delay(500);
		Engine.DlgSel(1);
		Delay(500);
		Engine.LoadConfig('Oly2.xml');
		break;
	end;
	//Script.NewThread(@Detect_SystemMessages);
	if WaitForEntry then begin
		BuffUp_Olympiad(0);
	end else begin
		Print('Error, we did not enter olympiad, leave registration instead???');
		Engine.BlinkWindow();
		exit;
	end;
	
	count := 0;
	//while not Match_Started do begin
		//enemy := GetEnemyPlayer;
		//if not (enemy.Oid = User.Oid) then break;
		//Delay(1000);
		//count := count + 1;
		//if (count > 75) then exit;
	//end;
	Print('fight started.');
	enemy := GetEnemyPlayer;
	//if not (enemy.Oid = User.Oid) then begin
		myNum := GetControlNum(User.name);
		enemyNum := GetControlNum(enemy.Name);
		

		if not (enemyNum < 0) then begin
			//enemy is our char
			if (enemyNum <= myNum) then begin
				Print('We should not win this fight. Exit!');
				print('myNum = ' + IntToStr(myNum) + '  enemyNum = ' + IntToStr(enemyNum));
				exit;
			end;
		end;
		
	oX := User.X;
	oY := User.Y;
	oZ := User.Z;
	
	
		while (User.DistTo(oX, oY, oZ) < 10000) do begin
			Delay(250);
			if not (User.Target = enemy) then begin
				Engine.CancelTarget;
				Engine.SetTarget(enemy);
			end;
			
			if MaintainCombatSelfBuffs_Olympiad then begin
				Delay(500);
				enemy := GetEnemyPlayer;
				continue;
			end;
			
			//Get in range
			if (User.DistTo(enemy) > 75) then begin
				x := enemy.X; y := enemy.Y; z  := enemy.Z;
				Engine.DMoveTo(x, y, z);
				Delay(500);
				enemy := GetEnemyPlayer;
				continue;
			end;
			
			if AttackEnemyTarget then begin
				//nothing
			end else begin
				Delay(1000);
			end;
		
			enemy := GetEnemyPlayer;
		end;
	//end;
end.