unit fp_inc;
interface

function InitializeVariables: void;
function ResetVariables: void;

//function SetAttackTime: Boolean;

function wrap_Do_L2Idle_Rebuff: Boolean;

function IsTime_ToRebuff(): Boolean;
function CheckParty_DoCancelSleep: boolean;
function MapMove(X, Y: Integer): boolean;
function MoveTo_BackToZone: Boolean;
function MoveTo_AoePoint(rangeToPoint: Integer = 100): Boolean;
function IsSkillReady_OtherBotChar(skillId: Integer; sCharName: string): Boolean;

function Check_ClusterCharge_Pvp(): Boolean;
function Check_ClusterCharge_Pve(): Boolean;
function CheckUse_Charge(oTarget: Tl2Live): Boolean; Overload;
function CheckUse_Charge(oTarget: Tl2Char): Boolean; Overload;
function CheckUse_FinalSecret(): Boolean;
function CheckUse_HeroicValor_LeaderOnly: Boolean;
function CheckUse_HeroSelfBuffs: Boolean;
function Check_Trigger_Sos: Boolean;

function CheckMove_DeadParty_LeaderOnly: Boolean;
function VoiceCommand_Listen: Boolean;
function DoActions: Boolean;
function IsInPvp: Boolean;
function SetPvpStance: Boolean;
function GetName_Ee: string;
function SetPoint_PartyCenter: void;
function SetDistance_AoePointDistance: void;
function SetPoint_AoePosition(): TPoint;
function IsAoePoint_Valid: Boolean;
function IsOnlyTanksLeft: Boolean;
function IsOtherPlayersNearby(minRange: Integer): Boolean;
function ShouldIAgro: Boolean;

function GetOutOfCombat: void;
function IsUnderAttack: Boolean;
function IsTime_ToAoe: Boolean;
function IsTime_ToAoe_Pvp: Boolean;
function IsTime_ToAoe_Pve: Boolean;
function IsTime_ToBalanceLife: Boolean;
function IsTime_ToMajorGroupHeal: Boolean;
function IsTime_ToMassRez: Boolean;
function IsTime_ToHeal: Boolean;
function IsTime_ToHeal_Ee: Boolean;
function IsTime_ToPartyUd_Pve: Boolean;
function IsTime_ToPartyUd_Pvp: Boolean;
function LockCheck_MoveAndBot_Off: Boolean;
function LockCheck_MoveAndBot_On: Boolean;
function MoveToTarget_Timeout_Live(oTarget: Tl2Live; rangeToTarget, nTimeOut: Integer): Boolean;
function MoveTo_TimeOut(x, y, z, nMaxTime: Integer): Boolean;

function CUseSkill(nSkillId : Integer; force, shift, botWasOn: Boolean): Boolean; Overload;
function CUseSkill(nSkillId : Integer; force, shift, botWasOn: Boolean; oTarget: Tl2Live; range: Integer = 900): Boolean; Overload;
function CUseSkill(nSkillId : Integer; force, shift, botWasOn: Boolean; oTarget: Tl2Char; range: Integer = 900): Boolean; Overload;

function GetPartyNum: Integer;

function GetTarget_ToFollow(): Tl2Char;
function GetName_OtherHealer: string;
function GetName_Healer1: string;
function GetName_Healer2: string;
function GetName_Server: string;
function GetPath_CharSettings: string;
function GetPath_FileSettings: string;
function GetPath_ZoneFolder: string;
function cLoadZone(zoneName: string): Boolean;
function cLoadConfig(configName: string): Boolean;
function GetName_Leader: string;
function GetName_CoLeader: string;
function GetName_SecondLeader: string;
function GetName_LocalLeader: string;
function GetTarget_MainAssist: Tl2Char;
function SetTarget_MainAssist: Boolean;

function GetParty_AverageHp_AliveOnly: Integer;
function GetParty_AverageHp_DeadIncluded: Integer;
function GetMinPartyHp: Integer;
function GetMinPartyMp: Integer;
function GetCount_DeadPartyWithinRange(nMaxRange: Integer): Integer;
function GetCount_MagesClustered_NearChar_Pvp(oCenterTarget: Tl2Char; range: Integer): Integer;
function GetCount_DamageDealers_NearChar_Pvp(oCenterTarget: Tl2Char; range: Integer): Integer;
function WriteError(ErrorMessage : string): void;

function ObjectDistTo_PartyCenter(obj: Tl2Spawn): Cardinal;

function IsSkillReady(skillID: Integer): Boolean;
function HasSkill_Ready_Interval(nSkillId, interval_ms: Integer): Boolean;
function UseSkill_SetInterval(nSkillId, intervalToSet: Integer; force: Boolean = false): Boolean;

function SetInterval_OnSkillId(nSkillId, intervalToSet: Integer; force: Boolean = false): Boolean;
function HasIntervalPassed_BySkillId(nSkillId, interval_ms: Integer): Boolean;


function CheckSweep: boolean;

procedure Anti_EventPopup;

function SHIFT : boolean;
function CTRL : boolean;
function ALT : boolean;
function bHALF : boolean;

function cEnterText(msg: string): Boolean;

function GetZone: Integer;
function GetClosestNpcOfId(NpcId: Integer): Tl2Live;

function IsAbnormalActive(searchId, abnormalId: Cardinal): Boolean;

function SetWeaponEquipped: Boolean;
function CheckDisarm(): Boolean;

function CompleteAutoFarm: void;


function CheckDispellBuffs(idList: array of integer): Boolean;
function CheckFindNewMob: Boolean;

implementation
uses
SysUtils, Classes, global_vars, fp_target_inc, fp_char_info, fp_actions_inc, fp_ap, fp_math_inc, class_unit;


function VoiceCommand_Listen: Boolean;
var
sCommand, prefix: string;
words: array of string;
oSender: Tl2Char;
oSkill: Tl2Skill;
oItem: Tl2Item;
x, y, z, adenaCount: Integer;
begin
	result := false;
	prefix := 'c';
	oSender := nil;
	if (ChatMessage.Unread)
	and (ChatMessage.Time < 10000)
	and (Party.Chars.ByName(ChatMessage.Sender, oSender) or (ChatMessage.Sender = GetName_Leader) or (ChatMessage.Sender = GetName_SecondLeader) or (ChatMessage.Sender = GetName_CoLeader))
	and not (ChatMessage.Sender = User.Name) then begin
		sCommand := ChatMessage.Text;
		words := sCommand.Split(' ');
		if not (words[0] = prefix) then Exit;
		sCommand := ChatMessage.Text;
		
		if (oSender = nil) then begin
			CharList.ByName(ChatMessage.Sender, oSender);
		end;
		
		if DuoPartyMode then begin
			if (User.Name = GetName_CoLeader) then begin
				//Co-Leader should pass commands along to Second-Leader
				PassCommandAlongTo_SecondLeader(sCommand);
			end else if (User.Name = GetName_SecondLeader) then begin
				//Second-Leader should pass commands along to his party
				if (Party.Chars.Count > 1) then
					Engine.Say(sCommand, 3, '');
			end;
		end;
		
		result := true;
		
		if (sCommand = prefix + ' start all') then begin
			Engine.FaceControl(0, true);
			TotalPause := false;
		
		end else if (sCommand = prefix + ' pause all') then begin
			Engine.FaceControl(0, false);
			TotalPause := true;
		
		end else if (sCommand = prefix + ' start heal') and (GetClassValue_Healer(User.ClassId) > 0) then begin
			Engine.FaceControl(0, true);
			TotalPause := false;
		
		end else if (sCommand = prefix + ' pause heal') and (GetClassValue_Healer(User.ClassId) > 0) then begin
			Engine.FaceControl(0, false);
			TotalPause := true;
		
		end else if (sCommand = prefix + ' pvp on') then begin
			PvpEnabled := true;
		
		end else if (sCommand = prefix + ' pvp off') then begin
			PvpEnabled := false;
		
		end else if (sCommand = prefix + ' pk on') then begin
			TotalPause := true;
			AA_AssistPk := true;
			if not (CommandSenderList = nil) or (CommandSenderList.count > 0) then CommandSenderList.Free;
			CommandSenderList := TStringList.Create;
			CommandSenderList.Add(oSender.Name);
		
		end else if (sCommand = prefix + ' pk off') then begin
			TotalPause := false;
			AA_AssistPk := false;
			if not (CommandSenderList = nil) or (CommandSenderList.count > 0) then CommandSenderList.Free;
			CommandSenderList := TStringList.Create;
				
		end else if (sCommand = prefix + ' rbf') then begin
			DoRebuff;
			DoRebuff_Pet;
		
		end else if (sCommand = prefix + ' rbf slow') then begin
			Delay(Random(10000));
			DoRebuff;
			DoRebuff_Pet;
			
		end else if (IsClass_Summoner(User.ClassId)) 
		and (sCommand = prefix + ' pull mobs') 
		and not AA_BringMobsMode then begin
			print('start pulling...');
			AA_BringMobsMode := true;
			if (MAX_PARTY_PT_DIST < 1200) then 
				temp_Max_Party_Pt_Dist := MAX_PARTY_PT_DIST;
			MAX_PARTY_PT_DIST := 1200;
			pulledMobList := TList.Create();
			
		end else if (IsClass_Summoner(User.ClassId)) 
		and (sCommand = prefix + ' stop pull mobs') 
		and AA_BringMobsMode then begin
			print('stop pulling...');
			AA_BringMobsMode := false;
			MAX_PARTY_PT_DIST := temp_Max_Party_Pt_Dist;
			if not (pulledMobList = nil) and (pulledMobList.Count > 0) then pulledMobList.Free();
		
		end else if (sCommand = prefix + ' go close') then begin
			Engine.FaceControl(0, false);
			TotalPause := true;
			IsMoving := true;
			AA_GoClose := true;
			AA_GoVeryClose := false;
			if not (CommandSenderList = nil) or (CommandSenderList.count > 0) then CommandSenderList.Free;
			CommandSenderList := TStringList.Create;
			CommandSenderList.Add(oSender.Name);
		
		end else if (sCommand = prefix + ' go very close') then begin
			Engine.FaceControl(0, false);
			TotalPause := true;
			IsMoving := true;
			AA_GoClose := false;
			AA_GoVeryClose := true;
			if not (CommandSenderList = nil) or (CommandSenderList.count > 0) then CommandSenderList.Free;
			CommandSenderList := TStringList.Create;
			CommandSenderList.Add(oSender.Name);
		
		end else if (sCommand = prefix + ' disable combat') then begin
			CombatEnabled := false;
		
		end else if (sCommand = prefix + ' enable combat') then begin
			CombatEnabled := true;
			
		end else if (sCommand = prefix + ' spread') then begin
			Engine.FaceControl(0, true);
			TotalPause := false;
			IsMoving := false;
			AA_GoClose := false;
			AA_GoVeryClose := false;
			if not (CommandSenderList = nil) or (CommandSenderList.count > 0) then CommandSenderList.Free;
			CommandSenderList := TStringList.Create;
			
		end else if (sCommand = prefix + ' heal spread') and (GetClassValue_Healer(User.ClassID) > 0) then begin
			Engine.FaceControl(0, true);
			TotalPause := false;
			IsMoving := false;
			AA_GoClose := false;
			AA_GoVeryClose := false;
			if not (CommandSenderList = nil) or (CommandSenderList.count > 0) then CommandSenderList.Free;
			CommandSenderList := TStringList.Create;
		
		end else if (IsClass_Tank(User.ClassID)) and (sCommand = prefix + ' circle agro on') then begin
			CircleAgroMode := true;
			Engine.FaceControl(0, false);
			
		end else if (IsClass_Tank(User.ClassID)) and (sCommand = prefix + ' circle agro off') then begin
			CircleAgroMode := false;
		
		end else if (sCommand = prefix + ' discrete mode on') then begin
			DiscreteMode := true;
			
		end else if (sCommand = prefix + ' discrete mode off') then begin
			DiscreteMode := false;
			
		end else if (sCommand = prefix + ' use soe') then begin
			if (Inventory.user.ById(736, oItem)) then begin
				Engine.FaceControl(0, false);
				Engine.UseItem(736);
			end; 
			
		end else if (IsClass_Summoner(User.ClassId)) 
		and (sCommand = prefix + ' summon me') then begin
			if (SkillList.ById(1403, oSkill)) then begin
				if (oSkill.EndTime <= 0) or (oSkill.Endtime > 500000) then begin
					Engine.FaceControl(0, false);
					Delay(500);
					Engine.CancelTarget;
					Engine.SetTarget(ChatMessage.Sender);
					Engine.UseSkill(1403);
					Engine.FaceControl(0, true);
				end;
				
			end;
					
					
					
		end else if (interlude) then begin 
			//  If interlude mode is enabled, block the following commands.
			result := false;
			exit;
				
		end else if (Length(words) >= 2) and (words[1] = 'port') then begin
			HandleCommand_Port(sCommand);
				
		end else if (Length(words) >= 3) and (words[1] = 'talk') then begin
			HandleCommand_TalkToNpc(sCommand, oSender);
		
		end else if (sCommand = prefix + ' enter fog') then begin
			MoveTo_InsideFog;
		
		end else if (sCommand = prefix + ' enter lower fog') then begin
			LeadDlg(32645, 1);
		
		end else if (sCommand = prefix + ' take 7rb quest') then begin
			LeadDlg(30754, 2, 1, 1, 1, 1, 1);
		
		end else if (sCommand = prefix + ' enter dv north') then begin
			LeadDlg(32865, 3);
		
		end else if (sCommand = prefix + ' mail me adena') then begin
			DoMails([57, 9547, 6393, 959, 9627, 9554, 10639]);
		
		end else if (sCommand = prefix + ' mail me everything') then begin
			DoAllMails();
			
		end else if (sCommand = prefix + ' restock') then begin
			Restock;
		
		end else if (sCommand = prefix + ' sell items') then begin
			SellAllItems;
		
		end else if (sCommand = prefix + ' ' + User.Name + ' buy dyes for everyone') then begin
			BuyAndSendDyesToParty;
		
		end else if (sCommand = prefix + ' enter soa') then begin
			LeadDlg(32734, 1);
		
		end else if (sCommand = prefix + ' walk soa tunnel') then begin
			SoaTunnelMove(3000);
		
		end else if (sCommand = prefix + ' move zaken') then begin
			MoveZaken();
		
		end else if (sCommand = prefix + ' exit instance') then begin
			ExitInstance();
		
		end else if (sCommand = prefix + ' move freya') then begin
			if (GetName_Server = 'Idle') then
				PortToIceMerchantCabin
			else
				MoveFreya();
		
		end else if (sCommand = prefix + ' move loa bridge') then begin
			MoveTo_LoaForceFieldBridge();
			
			
		
		end else if (sCommand = prefix + ' take core') then begin
			if (User.Inrange(102504, -124440, -2760, 1000)) and not (Inventory.user.ById(15469, oItem)) then begin
				Delay(Random(15000));
				Engine.FaceControl(0, False);
				Engine.MoveTo(102504 + RandomizeNumber(50, 25), -124440 + RandomizeNumber(50, 25), -2760);
				Engine.CancelTarget;
				LeadDlg(32761, 1);
			end;
		
		end else if (sCommand = prefix + ' use core') then begin
			Engine.FaceControl(0, False);
			Delay(500);
			Engine.StopCasting();
			WalkRandom(10, 20);
			Delay(500);
			Engine.UseItem(15469);
			Engine.UseItem(15469);
			Engine.UseItem(15469);
			print('Use Core!!!');
			While (User.Cast.EndTime > 0 ) do delay(500);
			Engine.FaceControl(0, True);
			
			
			
		
		end else if (sCommand = prefix + ' max dps') then begin
			if (SkillList.ById(1532, oSkill)) then begin
				Engine.FaceControl(0, False);
				Delay(500);
				if (User.Cast.EndTime > 0) then
					Engine.StopCasting;
				Delay(1000);
				Engine.UseSkill(1532);
				Engine.FaceControl(0, True);
			end;
		
		end else if (sCommand = prefix + ' shut everything down!') then begin
			Engine.GameClose;
			
		
		end else if (sCommand = prefix + ' to village') then begin
			Engine.GoHome;
			
		end else if (sCommand = prefix + ' drop adena') then begin
			if (Inventory.user.ById(57, oItem)) then begin
				x := User.X; y := User.Y; z := User.Z;
				adenaCount := oItem.Count;
				if (adenaCount > 100000) then begin
					Engine.dropitem(57, adenaCount - 90000, x, y, z);
					delay(3000);
				end;
			end; 
			if (Inventory.user.ById(6361, oItem)) then begin
				x := User.X; y := User.Y; z := User.Z;
				adenaCount := oItem.Count;
				if (adenaCount > 0) then begin
					Engine.dropitem(6361, adenaCount, x, y, z);
					delay(3000);
				end;
			end; 
					
		end else if (sCommand = prefix + ' item count') then begin
			Speak_ItemsCount_Party;
					
		end else if (sCommand = prefix + ' take vit') then begin
			if (Engine.SetTarget(4306)) then 
				LeadDlg(4306, 1);
					
		end else if (sCommand = prefix + ' reset vars') then begin
			ResetVariables;
					
		end else if (sCommand = prefix + ' inc follow rand') then begin
			FOLLOW_RANDOM_RANGE := FOLLOW_RANDOM_RANGE + 50;
			
		end else if (sCommand = prefix + ' inc follow dist') then begin
			FOLLOW_DIST := FOLLOW_DIST + 25;
					
		end else if (sCommand = prefix + ' dec follow rand') then begin
			if (FOLLOW_RANDOM_RANGE > 50) then
				FOLLOW_RANDOM_RANGE := FOLLOW_RANDOM_RANGE - 50
			else
				FOLLOW_RANDOM_RANGE := 0;
			
		end else if (sCommand = prefix + ' dec follow dist') then begin
			if (FOLLOW_DIST > 25) then
				FOLLOW_DIST := FOLLOW_DIST - 25
			else
				FOLLOW_DIST := 0;
			
		end else if (sCommand = prefix + ' follow setting') then begin			
			if (User.Name = GetName_CoLeader) then begin
				Delay(1000);
				Engine.Say('Follow distance = ' + IntToStr(FOLLOW_DIST), 3, '');
				Engine.Say('Follow random range = ' + IntToStr(FOLLOW_RANDOM_RANGE), 3, '');
			end;
			
		end else if (sCommand = prefix + ' lower') then begin
			LowHpMode := true;
			SetInterval_OnSkillId(99999, 120000);
			
		end else if (sCommand = prefix + ' stop lower') then begin
			LowHpMode := false;
			
		end else if (sCommand = prefix + ' duo mode on') then begin
			DuoPartyMode := true;
			print('Switched to duo party mode');
			
		end else if (sCommand = prefix + ' duo mode off') then begin
			DuoPartyMode := false;
			print('Switched to single party mode');
			
		end else if (sCommand = prefix + ' sos mode on') then begin
			SOS_POP_MODE := true;
			print('Switched to Spirit of Shilen triggering mode');
			
		end else if (sCommand = prefix + ' sos mode off') then begin
			SOS_POP_MODE := false;
			print('Switched off from Spirit of Shilen triggering mode');
			
		end else if (sCommand = prefix + ' lowest first on') then begin
			TargetSearch_LowestFirst := true;
			print('Switched to ''Lowest First'' target search mode');
			
		end else if (sCommand = prefix + ' lowest first off') then begin
			TargetSearch_LowestFirst := false;
			print('Switched off from ''Lowest First'' target search mode');
					
				
		
		
		end else
			result := false;
		
		
		
	end;
end;

function PassCommandAlongTo_SecondLeader(sCommand: string): Boolean;
begin
	//Send commands two times, incase of miss-read
	Engine.Say(sCommand, 2, GetName_SecondLeader());
	Engine.Say(sCommand, 2, GetName_SecondLeader());
end;

function HandleCommand_Port(sMessage: string): Boolean;
var
sCommand: string;
words: array of string;
i: Integer;
begin
	result := false;
	
	words := sMessage.Split(' ');	
	
	sCommand := '';
	for i := 1 to Length(words) - 1 do begin
		if not(i = 1) then sCommand := sCommand + ' ';
		sCommand := sCommand + words[i];
	end;	
	
	result := true;
	
	if (sCommand = 'port toi1') then begin
		PortToi1;
	end else if (sCommand = 'port toi2') then begin
		PortToi2;
	end else if (sCommand = 'port toi3') then begin
		PortToi3;
	end else if (sCommand = 'port toi4') then begin
		PortToi4;
	end else if (sCommand = 'port toi5') then begin
		PortToi5;
	end else if (sCommand = 'port toi6') then begin
		PortToi6;
	end else if (sCommand = 'port toi7') then begin
		PortToi7;
	end else if (sCommand = 'port toi8') then begin
		PortToi8;
	end else if (sCommand = 'port toi9') then begin
		PortToi9;
	end else if (sCommand = 'port toi10') then begin
		PortToi10;
	end else if (sCommand = 'port toi11') then begin
		PortToi11;
	end else if (sCommand = 'port toi12') then begin
		PortToi12;
	end else if (sCommand = 'port toi13') then begin
		PortToi13;
	end else if (sCommand = 'port pavel') then begin
		PortPavel;
	end else if (sCommand = 'port fog') then begin
		PortFog;
	end else if (sCommand = 'port ev') then begin
		PortToEnchantedValley;
	end else if (sCommand = 'port breka') then begin
		PortToBreka;
	end else if (sCommand = 'port vos') then begin
		PortToValleyOfSaints;
	end else if (sCommand = 'port ivory') then begin
		PortToIvoryTower;
	end else if (sCommand = 'port abg') then begin
		PortToABG;
	end else if (sCommand = 'port cemetary') then begin
		PortToCemetary;
	end else if (sCommand = 'port beehive') then begin
		PortToBeehive;
	end else if (sCommand = 'port sos') then begin
		PortToSwampOfScreams;
	end else if (sCommand = 'port dv') then begin
		PortToDragonValley;
	end else if (sCommand = 'port dv mid') then begin
		PortToDragonValleyMid;
	end else if (sCommand = 'port loa') then begin
		PortToAntharasLair;
	end else if (sCommand = 'port orc barracks') then begin
		PortToOrcBarracks;
	end else if (sCommand = 'port windy hill') then begin
		PortWindyHill;
	end else if (sCommand = 'port town') then begin
		PortRandomTown;
	end else if (sCommand = 'port giran') then begin
		PortToGiran;
	end else if (sCommand = 'port heine') then begin
		PortToHeine;
	end else if (sCommand = 'port rune') then begin
		PortToRune;
	end else if (sCommand = 'port dion') then begin
		PortToDion;
	end else if (sCommand = 'port aden') then begin
		PortToAden;
	end else if (sCommand = 'port soa') then begin
		PortSoa;
	end else if (sCommand = 'port silent valley') then begin
		PortSilentValley;
	end else if (sCommand = 'port it') then begin
		PortImperialTomb;
	end else if (sCommand = 'port mos') then begin
		PortMonastery;
	end else if (sCommand = 'port mos upper') then begin
		PortMonasteryUpper;
	end else if (sCommand = 'port varka') then begin
		PortToVarka;
	end else if (sCommand = 'port gc') then begin
		PortGiantsCave;
	end else if (sCommand = 'port hb entrance') then begin
		PortToHellboundEntrance;
	end else if (sCommand = 'port hb quary') then begin
		PortToHellboundQuary;
	end else if (sCommand = 'port hb oasis') then begin
		PortToHellboundOasis;
	end else if (sCommand = 'port hb temple') then begin
		PortToHellboundAncientTemple;
	end else if (sCommand = 'port hb battered') then begin
		PortToHellboundBatteredLands;
	end else if (sCommand = 'port hb foundry') then begin
		PortToHellboundAtmoicFoundry;

	end else if (sCommand = 'port pagan') then begin
		PortPagan;
		Engine.MoveTo(34916, -49756, -760);
		Engine.SetTarget(32039);
		Delay(500);
		Engine.DlgOpen();
		Delay(3000);
		Engine.MoveTo(-13102, -35817, -10848);
		Engine.MoveTo(-15262, -35831, -10736);
		Engine.MoveTo(-16379, -36518, -10720);
		Engine.MoveTo(-16245, -36709, -10720);
		
		
		
	end else if (sCommand = 'port dark omens') then begin
		PortCataDarkOmens;
	end else if (sCommand = 'port forbidden path') then begin
		PortCataForbiddenPath;
	end else if (sCommand = 'port witch') then begin
		PortCataWitch;
	end else if (sCommand = 'port apostate') then begin
		PortCataApostate;
	end else if (sCommand = 'port branded') then begin
		PortCataBranded;
	end else if (sCommand = 'port heretics') then begin
		PortCataHeretics;
	end else if (sCommand = 'port saints') then begin
		PortNecroSaints;
	end else if (sCommand = 'port disciples') then begin
		PortNecroDisciple;
	end else if (sCommand = 'port martyrdom') then begin
		PortNecroMartyrdom;
	end else if (sCommand = 'port devotion') then begin
		PortNecroDevotion;
	end else if (sCommand = 'port patriots') then begin
		PortNecroPatriots;
	end else if (sCommand = 'port worshippers') then begin
		PortNecroWorshippers;
	end else if (sCommand = 'port pilgrims') then begin
		PortNecroPilgrims;
	end else if (sCommand = 'port sacrifice') then begin
		PortNecroSacrifice;
	
	
	
	
	
	
	
	
	
	end else 
		result := false;
	

end;

function HandleCommand_TalkToNpc(sMessage: string; oCommander: Tl2Char): Boolean;
var
sCommand: string;
words: array of string;
talkIndices: array of Integer;
npcId, commandLength: Integer;
i: Integer;
oNpc: Tl2Live;
begin
	result := false;
	
	words := sMessage.Split(' ');	
	commandLength := Length(words);
	if (commandLength < 3) then exit;
	if (oCommander = nil) or (oCommander.Target = nil) then exit;
	
	if (words[0] = 'c')
	and (words[1] = 'talk') then begin
		
		SetLength(talkIndices, commandLength - 2);
		for i := 0 to Length(talkIndices) - 1 do begin
			//Skip the first 2 words. ('c', 'talk')
			talkIndices[i] := StrToIntDef(words[i + 2], 0);
			if (talkIndices[i] = 0) then begin
				print(words[i + 2] + ' is not recognized as a number.');
				exit;
			end;
		end;
	
		oNpc := oCommander.target;
		
		//Check if the desired npc is present
		if not (oNpc = nil) then begin
			
			//Fail safe
			if (not oNpc.Valid)
			or (User.DistTo(oNpc) > 1000)
			or (oNpc.Attackable) then begin
				Print('Npc: ' + oNpc.Name + ' is not available.');
				exit;
			end;
			
			//Speak to npc
			Engine.CancelTarget();
			Engine.SetTarget(oNpc);
			Delay(200);
			if (User.DistTo(oNpc) > 75) then Engine.MoveToTarget(-75);
			Delay(500);
			Engine.DlgOpen();
			Delay(1000);
			for i := 0 to Length(talkIndices) - 1 do begin
				if not Engine.DlgSel(talkIndices[i]) then exit;
				Delay(1000);
			end;
			
			result := true;
		end;
	end;
end;


function IsTime_ToTrigger_Sos_OnTarget(oTarget: Tl2Char): Boolean;
var
oBuff: Tl2Buff;
begin
	result := false;
	if (oTarget = nil) or not oTarget.IsMember then exit;
	if not IsClass_Sk(oTarget.ClassId) then exit;
	if User.DistTo(oTarget) > 700 then exit;
	
	//If we already have Spirit of shilen, then false.
	If User.Buffs.ById(789, oBuff) or oTarget.Buffs.ById(789, oBuff) then exit;
	
	if oTarget.Buffs.ById(788, oBuff)
	or ((oTarget.Buffs.ById(5564, oBuff)) and (oBuff.Level < 3)) then result := true
end;

function Check_Trigger_Sos: Boolean;
var
i: Integer;
oTarget, oResult: Tl2Char;
found: Boolean;
begin
	result := false;
	if not SOS_POP_MODE then exit;
	
	found := false;
	oResult := nil;
	for i := 0 to Party.Chars.Count - 1 do begin
		oTarget := Party.Chars.Items(i);
		if (oTarget = nil) then continue;
		if not oTarget.Dead 
		and (oTarget.Hp > 60) 
		and IsTime_ToTrigger_Sos_OnTarget(oTarget) then begin
			found := true;
			oResult := oTarget;
		end;
	end;
	
	if found and not (oResult = nil) then begin
		if not (User.Target = oResult) then begin
			Engine.CancelTarget;
			Engine.SetTarget(oResult);
		end;
		Engine.Attack(50, true);
		SOS_TargetFound := true;
		result := true;
	end else if SOS_TargetFound then begin
		WalkRandom(5, 10);
		SOS_TargetFound := false;
	end;
	
end;

function CheckParty_DoCancelSleep: boolean;
var
i: Integer;
oTarget, temp: Tl2Char;
begin
	result := false;
	for i := 0 to Party.Chars.Count - 1 do begin
		oTarget := Party.Chars.Items(i);
		if (oTarget = nil) or not (CharList.ByName(oTarget.Name, temp)) then continue;
		
		if not(oTarget.Dead)
		and IsAbnormalActive(128, oTarget.AbnormalId) then begin
			result := true;
			engine.SetTarget(oTarget);
			Engine.Attack(500, true);
			exit;
		end;
	end;
end;

function DoMails(IdList: array of Cardinal): Boolean;
var
i, j, IDLength: Integer;
TempMailList, MailList: array of Cardinal;
ItemCount: Cardinal;
oItem: Tl2Item;
HasItem: Boolean;
recipentName: string;
begin
	//print('Mail adena initiated.');
  j := 0;
  IdLength := Length(IdList);
  SetLength(TempMailList, (2 * (IdLength)));
  for i := 0 to IdLength - 1 do begin
  HasItem := Inventory.User.ByID(IdList[i], oItem);
    if (HasItem) then begin
	  if (oItem.ID = 57) then begin
        ItemCount := oItem.count - 500000;
        if (ItemCount < 30000) then continue;
      end else begin
        ItemCount := oItem.Count;
      end;	  
	  if (ItemCount > 0) then begin
	    TempMailList[j*2] := IdList[i];
		TempMailList[(j*2)+1] := ItemCount;
		Inc(j);
	  end;
	end;
  end;  
	
	//print('Found ' + IntToStr(j) + ' items to mail.');
  if (j > 0) then begin
    SetLength(MailList, (j*2));
    for i := 0 to j - 1 do begin
	  MailList[i*2] := TempMailList[i*2];
	  MailList[(i*2)+1] := TempMailList[(i*2) + 1];
	  print('Added item with id = ' + IntToStr(MailList[i*2]) + ' with count = ' + IntToStr(MailList[(i*2)+1]));
	end;
	recipentName := GetName_LocalLeader;
	//print('Send mail to ' + recipentName);
    Engine.SendMail(recipentName, 'Thanks for the help', 'I suck big time :D', MailList);
  end;
end;

function DoAllMails(): Boolean;
var
i, j, mailIndex, IDLength: Integer;
TempMailList, MailList: array of Cardinal;
ItemCount: Cardinal;
oItem: Tl2Item;
leaderName: string;
exceptionList: TStringList;
begin
	print('Start Mailing');
	result := false;
	j := 0;
	
	exceptionList := TStringList.Create();
	
	IdLength := Mail_List.Count;
	if (IdLength <= 0) then begin
		print('mail list not found');
		exit;
	end;
	
	leaderName := GetName_LocalLeader;
	if (leaderName = '') then begin
		Print('no mail leader found');
		exit;
	end;
	
	SetLength(TempMailList, (2 * (IdLength)));
	for i := 0 to IdLength - 1 do begin
		if (Inventory.User.ByID(StrToInt(Mail_List[i]), oItem)) then begin
			if (oItem.ID = 57) then begin
				ItemCount := oItem.count - 500000;
				if (ItemCount < 30000) then continue;
			end else begin
				ItemCount := oItem.Count;
			end;	  
			if (ItemCount > 0) 
			and not (oItem.Equipped) 
			and (exceptionList.IndexOf(Mail_List[i]) = -1) 
			and ((oItem.ItemType = 5) or (oItem.ItemType = 4)) then begin
				print('Found Item to mail: ' + oItem.Name + ' with count = ' + IntToStr(ItemCount));
				TempMailList[j*2] := StrToInt(Mail_List[i]);
				TempMailList[(j*2)+1] := ItemCount;
				exceptionList.Add(Mail_List[i]);
				Inc(j);
			end;
		end;
	end;  
	print('We found ' + IntToStr(j) + ' items to mail');
	while (j > 0) do begin
	
		if (j <= 8) then begin
			SetLength(MailList, (j*2));
			for i := 0 to j - 1 do begin
				MailList[i*2] := TempMailList[i*2];
				MailList[(i*2)+1] := TempMailList[(i*2) + 1];
			end;
			j := j - 8;
			Engine.SendMail(leaderName, 'Last mail', 'items...', MailList);
			print('Send last Mail with ' + IntToStr(Length(MailList) div 2) + ' items.' );
		end else if (j > 8) then begin
			SetLength(MailList, 16);
			mailIndex := 0;
			for i := j - 8 to j - 1 do begin
				MailList[mailIndex * 2] := TempMailList[i*2];
				MailList[(mailIndex * 2)+1] := TempMailList[(i*2) + 1];
				Inc(mailIndex);
			end;
			j := j - 8;
			Engine.SendMail(leaderName, 'More mails comming...', 'items...', MailList);
			print('Send Mail with ' + IntToStr(Length(MailList) div 2) + ' items.' );
			
		end;
		Delay(20000);
	end;
	
	print('Ended Mailing');
end;

function DoActions: Boolean;
var
caller: Tl2Char;
callerFound: Boolean;
oBuff: Tl2Buff;
callerName: string;
begin
	result := true;
	CheckDisarm();
	CheckPickupDrops;
	
	if IsTime_ToRebuff then begin
		print('Time to rebuff ourself');
		DoRebuff;
	end;
	if IsTime_ToRebuff_Pet then begin
		print('Time to rebuff pet');
		DoRebuff_Pet;
	end;
	
	if not (interlude) and not (GetName_Server = 'Idle') then
		CheckBuff_Cov;	
	
	if DuoPartyMode then begin
		callerName := GetName_LocalLeader;
		callerFound := Party.Chars.ByName(callerName, caller) or CharList.ByName(callerName, caller);
	end else begin
	
		if (CommandSenderList.Count > 0) then
			callerFound := CharList.ByName(CommandSenderList[0], caller)
		else
			callerFound := false;
		
		callerName := caller.Name;
	end;
	
	if (AA_GoClose) and callerFound then begin
		Action_GoClose(callerName, 70);
	
	end else if (AA_GoVeryClose) and callerFound then begin
		Action_GoClose(callerName, 20);
	
	end else if (AA_AssistPk) and callerFound then begin
		Action_AssistPk(callerName);
	
	end else
		result := false;
end;

function IsTime_ToRebuff(): Boolean;
var
oBuff: Tl2Effect;
begin
	result := false;
	if (interlude) or (GetName_Server = 'Idle') then exit;
	
	if (user.InCombat or User.PVP or User.PK) or User.Dead then exit;
	
	if (User.Buffs.Count < 18) then begin
		result := true;
		exit;
	end;
	//If no noblesse or Salvation
	if canBuffNoblesse then begin
		if not User.Buffs.ByID(1323, oBuff) and not User.Buffs.ByID(1410, oBuff) then begin
			result := true;
			exit;
		end;
	end;
end;

function IsTime_ToRebuff_Pet(): Boolean;
var
oBuff: Tl2Effect;
oPet: Tl2Pet;
begin
	result := false;
	if (interlude) or (GetName_Server = 'Idle') then exit;
	
	if (user.InCombat or User.PVP or User.PK) or User.Dead then exit;
	
	if (PetList.Count < 1) then exit;
	oPet := PetList.Items(0);
	if (oPet = nil) or (oPet.Dead) or (not oPet.Valid) then exit;
	
	if (oPet.Buffs.Count < 18) then begin
		result := true;
		exit;
	end;
	//If no noblesse or Salvation
	if canBuffNoblesse then begin
		if not oPet.Buffs.ByID(1323, oBuff) and not oPet.Buffs.ByID(1410, oBuff) then begin
			result := true;
			exit;
		end;
	end;
end;
(*
function SetAttackTime: Boolean;
var
currentAttackTime: Cardinal;
currentTime: TDateTime;
begin
	result := false;
	
	print('LastAttackTime = ' + IntToStr(LastAttackTime));
	
	currentAttackTime := user.AtkTime;
	print('currentAttackTime = ' + IntToStr(currentAttackTime));
	
	currentTime := now;
	TotalTimePassed := GetMillisecondsInBetween(StartTime, currentTime);
	AttackStartTime := AttackStartTime + (currentTime - StartTime);
	StartTime := currentTime;
	
	print('AttackStartTime = ' + TimeToStr(AttackStartTime));
	print('AttackStartTime in ms= ' + IntToStr(TimeToMs(AttackStartTime)));
	
	//We have made a new attack
	if (currentAttackTime > LastAttackTime) then begin
		if (AttackStartTime >= MsToTime(currentAttackTime)) then
			TimeSinceLastAttack := TimeToMs(AttackStartTime) - currentAttackTime
		else 
			TimeSinceLastAttack := 0;
			
		LastAttackTime := currentAttackTime;
		print('LastAttackTime = ' + IntToStr(LastAttackTime));
		
		
	//We have not attacked since last time, update time since last attack
	end else if (currentAttackTime = LastAttackTime) then begin
		TimeSinceLastAttack := TimeToMs(AttackStartTime) - LastAttackTime;
		print('Time since last attack is ' + IntToStr(TimeSinceLastAttack div 1000));
	end else begin
		print('WARNING ERROR!!! SetAttackTime: Variable Overflow!');
		print('currentAttackTime = ' + IntToStr(currentAttackTime));
		print('TotalTimePassed = ' + IntToStr(TotalTimePassed));
		print('LastAttackTime = ' + IntToStr(LastAttackTime));
		print('TimeSinceLastAttack = ' + IntToStr(TimeSinceLastAttack));
		
	end;
	
	result := true;
end;
*)
function SetPvpStance: Boolean;
var
inPvp: Boolean;
begin
	result := false;
	
	if DiscreteMode and (PlayersNearby) then begin
		PvpLoaded := false;
		PveLoaded := false;
		if not DiscreteLoaded then begin
			DiscreteLoaded := true;
			cLoadConfig(User.Name +'_Off.xml');
			Print('Loaded Discrete Settings');
		end;
		//Print('Switched to Discrete/Off Mode');
		Exit;
	end;
	
	if LowHpMode then begin
		PvpLoaded := false;
		PveLoaded := false;
		DiscreteLoaded := false;
		if not LowHpSettingLoaded then begin
			if IsClass_ZealotType(User.ClassId) then begin
				Engine.FaceControl(0, false);
			end;
			cLoadConfig(User.Name +'_LowHp.xml');
			LowHpSettingLoaded := true;
			Engine.AutoSoulShot('Soulshot (S-Grade)', false);
			Print('Loaded Low Hp Settings');
		end;
		Exit;
	end;
	
	if LowHpSettingLoaded then begin
		Print('Left LowHpMode, reload soulshots, and possibly interface control');
		Engine.AutoSoulShot('Soulshot (S-Grade)', true);
		if not TempOff and not TotalPause then
			Engine.FaceControl(0, true);
	end;
	
	
	
	
	
	inPvp := IsInPvp;
	if (inPvp) and not PvpLoaded then begin
		PvpLoaded := true;
		PveLoaded := false;
		cLoadConfig(User.Name +'_PvP.xml');
		Print('Switched to Pvp Mode');
		DiscreteLoaded := false;
		LowHpSettingLoaded := false;
	end else if (not inPvp) and not PveLoaded then begin
		PvpLoaded := false;
		PveLoaded := true;
		cLoadConfig(User.Name +'_Pve.xml');
		Print('Switched to Pve Mode');
		DiscreteLoaded := false;
		LowHpSettingLoaded := false;
	end;
	
	result := true;
end;

function IsInPvp: Boolean;
//checked
var
i, x, y, TempX, TempY: Integer;
oTarget: Tl2Char;
begin
	//print('IsInPvp: Started');
	result := false;
	if not(PvpEnabled) then Exit;
	
	for i := 0 to CharList.Count - 1 do begin
		oTarget := CharList.Items(i);
		if (oTarget = nil) then begin
			Continue;
		end;
		
		//print('IsInPvp: Checking: ' + oTarget.Name);
	
		x := oTarget.x;
		y := oTarget.Y;
		TempX := PT_PX;
		TempY := PT_PY;
		if (GetDistanceBetweenPoints(TempX, TempY, x, y) > MAX_RANGE_PVP_SEARCH) then continue;
		//print('IsInPvp: not too far away');
		if (IsTarget_Pvp(oTarget)) then begin
			result := true;
			Exit;
		end;
		//print('IsInPvp: ' + oTarget.Name + ' was not a pvp target');
	end;
end;


function LockCheck_MoveAndBot_Off: Boolean;
begin
	result := false;
	if (TempOff) or IsMoving or MoveLock then Exit;
	
	if (Engine.GetFaceState(0)) then begin
		Engine.FaceControl(0, false);
		TempOff := true;
	end;
	IsMoving := true;
	MoveLock := true;
	
	
	result := true;
end;
function LockCheck_MoveAndBot_On: Boolean;
begin
	result := false;
	
	if (MoveLock) then begin
		if (TempOff) then begin
			Engine.FaceControl(0, true);
			TempOff := false;
		end;
		IsMoving := false;
		MoveLock := false;
		
		result := true;
	end;
end;


function MoveTo_AoePoint(rangeToPoint: Integer = 100): Boolean;
var
BotWasOn: Boolean;
z, counter : Integer;
begin
	result := false;
	if not (IsAoePoint_Valid) or IsMoving or TempOff then exit;
	BotWasOn := Engine.GetFaceState(0);
	if (BotWasOn) and not (TempOff) and not IsMoving then begin
		TempOff := true;
		IsMoving := true;
		Engine.FaceControl(0, false);
	end;
	z := User.Z;
	Engine.CancelTarget;
	counter := 0;
	while (User.DistTo(AOE_PX, AOE_PY, z) > rangeToPoint) do begin
		Engine.DMoveTo(AOE_PX, AOE_PY, z);
		Delay(200);
		counter := counter + 1;
		if (counter >= 3) then break;
	end;
	
	if (BotWasOn) and TempOff and IsMoving then begin
		TempOff := false;
		IsMoving := false;
		Engine.FaceControl(0, true);
	end;
	z := User.Z;
	result := User.InRange(AOE_PX, AOE_PY, z, rangeToPoint);
end;

function SetDistance_AoePointDistance: void;
var
z : Integer;
begin
	if not IsAoePoint_Valid then AOE_PT_DIST := 0
	
	else begin
		z := User.z;
		AOE_PT_DIST := User.DistTo(AOE_PX, AOE_PY, z);
	end;
end;

function IsAoePoint_Valid: Boolean;
begin
	if (AOE_PX = 0) and (AOE_PY = 0) then result := false
	else result := true;
end;


function IsSkillReady_OtherBotChar(skillId: Integer; sCharName: string): Boolean;
//checked
var
nEndTime: Integer;
oSkill: Tl2Skill;
oOtherChar: Tl2Char;
control: Tl2Control;
begin
	//print('IsSkillReady_OtherBotChar: Started, checking ' + sCharName + ', for skill = ' + IntToStr(skillID));
	result := false;
	control := getControl(sCharName);
	  
	if CharList.ByName(sCharName, oOtherChar)
	and (assigned(control)) then begin
	//print('IsSkillReady_OtherBotChar: Assigned: ' + oOtherChar.Name);
	
		if (skillID = 1409) then begin //Check cleanse item...
			if not HasItem_MinCount(control, 8874, 1) then exit;
		end;
	
		oSkill := nil;
		control.GetSkillList.ByID(skillId, oSkill);
		
		if (oSkill = nil) or (oSkill.Disabled) then begin 
			WriteError('IsOtherBotChar_SkillReady: oSkill = nil 1.');
			Exit;
		end;
		nEndTime := oSkill.EndTime;
		if ((nEndTime = 0) or (nEndTime >= 760000))
		or (oOtherChar.cast.Id = skillId) and (oOtherChar.Cast.EndTime > 0) then begin
		  result := True;
		  //print('IsOtherBotChar_SkillReady: result is true, ' + sCharName + ' has skill ready!');
		end;
	end;
end;

function IsSkillReady(skillID: Integer): Boolean;
var
skill: Tl2Skill;
begin
	result := false;
	if not (SkillList.ByID(skillID, skill)) then exit;
	
	if (skill.EndTime <= 0) or (skill.EndTime > 7600000) then result := true;
end;

function SetPoint_AoePosition(): TPoint;
var
pt: TPoint;
begin
	pt := Point(0, 0);
	if (PvpLoaded = null) then WriteError('CalculateBestAoePosition: PvpLoaded = nil');
	if (PvpLoaded) then 
		pt := GetPoint_AoePosition_Pvp
	else 
		pt := GetPoint_AoePosition_Pve;  

	AOE_PX := pt.X;
	AOE_PY := pt.Y;
	result := pt;
end;

function GetPoint_AoePosition_Pvp: TPoint;
var
oTarget, oCenterTarget, cchar: Tl2Char;
i, EndX, EndY, nDivider: Integer;
begin
	result := Point(0, 0);
	EndX := 0;
	EndY := 0;
	nDivider := 0;
  
	oCenterTarget := GetTarget_MostClustered_Char;
	if not IsTarget_ValidAndVisible_Char(oCenterTarget) then begin
		Exit;
	end;
	
	//Investigate all enemies within range of 1k
	for i := 0 to CharList.Count - 1 do begin
		oTarget := CharList.Items(i);
		if (oTarget = nil) then begin
			WriteError('CalculateBestAoePosition_Pvp: oTarget = nil');
			Continue;
		end;
		if (oCenterTarget.DistTo(oTarget) > (MAX_RANGE_AOE + 100))
		or not (IsTarget_Valid_Char(oTarget)) then Continue;
	
		EndX := EndX + oTarget.X;
		EndY := EndY + oTarget.Y;
		nDivider := nDivider + 1;
	end;

	if (nDivider > 1) then begin
		EndX := EndX div nDivider;
		EndY := EndY div nDivider;
	end;
  
	if (EndX = 0) and (EndY = 0) then begin
		result := Point(0, 0);
	end else begin
		result := Point(EndX, EndY);
	end;
end;

function GetPoint_AoePosition_Pve: TPoint;
var
oTarget, oCenterTarget, temp: Tl2Live;
i, EndX, EndY, nDivider, x, y: Integer;
begin
  result := Point(0, 0);
  EndX := 0;
  EndY := 0;
  nDivider := 0;
  oCenterTarget := GetTarget_MostClustered_Live;
  if not IsTarget_ValidAndVisible_Live(oCenterTarget) then begin
    Exit;
  end;

  //Investigate all enemies within range of 1k
  for i := 0 to NpcList.Count - 1 do begin
    oTarget := NpcList.Items(i);
	if (oTarget = nil) then begin
	  WriteError('CalculateBestAoePosition_Pve: oTarget = nil');
	  Continue;
	end;
	if (User.DistTo(oTarget) > MAX_RANGE_NPC_SEARCH) then break;
	if (oCenterTarget.DistTo(oTarget) > (MAX_RANGE_AOE+100))
	or not (IsTarget_Valid_Live(oTarget)) then Continue;
	
	EndX := EndX + oTarget.X;
	EndY := EndY + oTarget.Y;
	nDivider := nDivider + 1;
  end;

  if (nDivider > 1) then begin
    EndX := EndX div nDivider;
	EndY := EndY div nDivider;
  end;
  if (EndX = 0) and (EndY = 0) then begin
    WriteError('CalculateBestAoePosition_Pve: Point = (0, 0)');
    result := Point(0, 0);
  end else begin
    result := Point(EndX, EndY);
  end;
end;





function IsTime_ToAoe: Boolean;
begin
	result := false;
	if (PvpLoaded = null) then WriteError('IsTime_ToAoe: PvpLoaded = null');
	if (PvpLoaded) then 
		result := IsTime_ToAoe_Pvp
	else 
		result := IsTime_ToAoe_Pve;
end;

function IsTime_ToAoe_Pvp: Boolean;
var
oTarget, oTarget2: Tl2Char;
i, j, searchRange, dist1: Integer;
begin
  result := false;
  searchRange := 650;
  for i := 0 to CharList.Count-1 do begin
    oTarget := CharList.Items(i);
	
	if (oTarget = nil) then begin
	  WriteError('IsTime_ToAoe_Pvp: oTarget = nil');
	  Continue;
	end;
	dist1 := User.DistTo(oTarget);
	if (dist1 > searchRange) then break;
	if not (IsTarget_Valid_Char(oTarget)) then continue;
	
	for j := 0 to CharList.Count-1 do begin
		if (j = i) then Continue;
		oTarget2 := CharList.Items(j);
		if (oTarget2 = nil) then begin
			WriteError('IsTime_ToAoe_Pvp: oTarget2 = nil');
			Continue;
		end;
		if (User.DistTo(oTarget2) > searchRange + MAX_RANGE_AOE) then break;
		
		if (oTarget.DistTo(oTarget2) <= MAX_RANGE_AOE) 
		and (IsTarget_Valid_Char(oTarget2)) then begin
			result := true;
			Exit;
		end;
	end; 
  end;
end;

function IsTime_ToAoe_Pve: Boolean;
var
oTarget, oTarget2: Tl2Live;
i, j, counter: Integer;
begin
  result := false;
  counter := 0;
  
  for i := 0 to NpcList.Count-1 do begin
    oTarget := NpcList.Items(i);
	
	if (oTarget = nil) then begin
	  WriteError('IsTime_ToAoe_Pve: oTarget = nil, solved?');
	  Continue;
	end;
	if (User.DistTo(oTarget) > 650) then break;
	if not (IsTarget_Valid_Live(oTarget))
	or not IsTarget_OnUs_Live(oTarget) then continue;
	
	if (GetCount_EnemiesNearTarget_Pve_Live(oTarget) > 3) then begin
		result := true;
		Exit;
	end;
	(*
	for j := 0 to NpcList.Count-1 do begin
	  if (j = i) then Continue;
	  oTarget2 := NpcList.Items(j);
	  if (oTarget2 = nil) then begin
	    WriteError('IsTime_ToAoe_Pve: oTarget2 = nil');
	    Continue;
	  end;
	  if (oTarget = nil) then begin
	    WriteError('IsTime_ToAoe_Pve: oTarget = nil');
	    Continue;
	  end;
	  if (oTarget.DistTo(oTarget2) <= MAX_RANGE_AOE) 
	  and (IsTarget_Valid_Live(oTarget2)) then begin
	    Inc(counter);
	  end;
	end;*) 
  end;
end;

function GetCount_ClusteredMages_Pvp: Integer;
var
oTarget, oTarget2: Tl2Char;
i, j, count: Integer;
begin
	result := 0;
	count := 0;
	for i := 0 to CharList.Count-1 do begin
		oTarget := CharList.Items(i);
	
		if (oTarget = nil) then begin
			WriteError('IsTime_ToAoe_Pvp: oTarget = nil');
			Continue;
		end;
	
		if (User.DistTo(oTarget) > MAX_PARTY_PT_DIST) 
		or not (IsTarget_Valid_Char(oTarget))
		or IsClass_FighterType(oTarget.ClassId) then continue;
	
		for j := 0 to CharList.Count-1 do begin
			if (j = i) then Continue;
			oTarget2 := CharList.Items(j);
			if (oTarget2 = nil) then begin
				WriteError('IsTime_ToAoe_Pvp: oTarget2 = nil');
				Continue;
			end;
			if (oTarget.DistTo(oTarget2) <= MAX_RANGE_AOE) 
			and (IsTarget_Valid_Char(oTarget2)) 
			and not IsClass_FighterType(oTarget2.ClassId) then begin
				Inc(count);
			end;
		end; 
	end;
	result := count;
end;

function GetCount_MagesClustered_NearChar_Pvp(oCenterTarget: Tl2Char; range: Integer): Integer;
var
oTarget, oTarget2: Tl2Char;
i, j, count: Integer;
begin
	result := 0;
	if (oCenterTarget = nil) or (not oCenterTarget.Valid) or (oCenterTarget.Name = '') then exit;
	count := 0;
	for i := 0 to CharList.Count-1 do begin
		oTarget := CharList.Items(i);
	
		if (oTarget = nil) then begin
			WriteError('IsTime_ToAoe_Pvp: oTarget = nil');
			Continue;
		end;
	
		if (oCenterTarget.DistTo(oTarget) > range) then continue;
		if (User.DistTo(oTarget) > MAX_RANGE_PVP_SEARCH) then break;
		
		if not (IsTarget_Valid_Char(oTarget))
		or IsClass_FighterType(oTarget.ClassId) then continue;
	
		Inc(count);
	end;
	result := count;
end;

function GetCount_DamageDealers_NearChar_Pvp(oCenterTarget: Tl2Char; range: Integer): Integer;
var
oTarget, oTarget2: Tl2Char;
i, j, count: Integer;
begin
	result := 0;
	if (oCenterTarget = nil) or (not oCenterTarget.Valid) or (oCenterTarget.Name = '') then exit;
	count := 0;
	for i := 0 to CharList.Count-1 do begin
		oTarget := CharList.Items(i);
	
		if (oTarget = nil) then begin
			WriteError('IsTime_ToAoe_Pvp: oTarget = nil');
			Continue;
		end;
	
		if (oCenterTarget.DistTo(oTarget) > range) then continue;
		if (User.DistTo(oTarget) > MAX_RANGE_PVP_SEARCH) then break;
		
		if not (IsTarget_Valid_Char(oTarget))
		or not IsClass_DD(oTarget.ClassId) then continue;
	
		Inc(count);
	end;
	result := count;
end;

function GetPoint_AoePosition_Pvp_ClusteredMages: TPoint;
var
oTarget, oCenterTarget, cchar: Tl2Char;
i, EndX, EndY, nDivider: Integer;
begin
	result := Point(0, 0);
	EndX := 0;
	EndY := 0;
	nDivider := 0;
  
	oCenterTarget := GetTarget_MostClustered_Char_MagesOnly;
	if not IsTarget_ValidAndVisible_Char(oCenterTarget) then begin
		Exit;
	end;
	
	//Investigate all enemies within range of 1k
	for i := 0 to CharList.Count - 1 do begin
		oTarget := CharList.Items(i);
		if (oTarget = nil) then begin
			WriteError('CalculateBestAoePosition_Pvp: oTarget = nil');
			Continue;
		end;
		if (oCenterTarget.DistTo(oTarget) > (MAX_RANGE_AOE + 100))
		or not (IsTarget_Valid_Char(oTarget))
		or (IsClass_FighterType(oTarget.ClassId)) then Continue;
	
		EndX := EndX + oTarget.X;
		EndY := EndY + oTarget.Y;
		nDivider := nDivider + 1;
	end;

	if (nDivider > 1) then begin
		EndX := EndX div nDivider;
		EndY := EndY div nDivider;
	end;
  
	if (EndX = 0) and (EndY = 0) then begin
		result := Point(0, 0);
	end else begin
		result := Point(EndX, EndY);
	end;
end;

function GetCount_FriendlyBishopsDeadNear_NonParty(maxRange: Integer): Integer;
var
i, counter: Integer;
oTarget: Tl2Char;
begin
	result := 0;
	counter := 0;
	for i := 0 to CharList.Count - 1 do begin
		oTarget := CharList.Items(i);
		if (oTarget = nil) or (oTarget.Name = '') then continue;
		if (oTarget.IsMember) then continue;
		if (User.DistTo(oTarget) > maxRange) then break;
		if IsClass_Bp(oTarget.ClassId) 
		and (oTarget.Dead)
		and IsTarget_Friendly(oTarget) then begin
			counter := counter + 1;
		end;
	end;
	
	result := counter;
end;

function GetCount_FriendsDeadNear(maxRange: Integer): Integer;
var
i, counter: Integer;
oTarget: Tl2Char;
begin
	result := 0;
	counter := 0;
	if (User.Dead) then counter := 1;
	
	for i := 0 to CharList.Count - 1 do begin
		oTarget := CharList.Items(i);
		if (oTarget = nil) or (oTarget.Name = '') then continue;
		
		if (User.DistTo(oTarget) > maxRange) then break;
		
		if (oTarget.Dead)
		and (oTarget.IsMember or IsTarget_Friendly(oTarget)) then begin
			counter := counter + 1;
		end;
	end;
	
	result := counter;
end;


function IsTime_ToHeal: Boolean;
//checked
var
i: Integer;
oTarget: Tl2Char;
begin
	result := False;
	if (GetMinPartyHp < 85) then begin
		result := True;
		Exit;
	end;
	for i:= 0 to Party.Chars.Count - 1 do begin
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then Continue;
		if (IsTarget_Debuffed_GetState(oTarget) > 0) or (oTarget.Dead) then begin
			result := True;
			Exit;
		end;
	end;
	if (DuoPartyMode) then begin
		if (GetCount_FriendlyBishopsDeadNear_NonParty(900) >= 2) then result := true;
		if (GetCount_FriendsDeadNear(900) >= 1) then result := true;
	end;
end;

function IsTime_ToHeal_Ee: Boolean;
//checked
var
i: Integer;
oTarget: Tl2Char;
begin
	result := False;
	if (GetMinPartyHp < 85) then begin
		result := True;
		Exit;
	end;
	exit; //Dont look at debuffs atm as elven elder
	for i:= 0 to Party.Chars.Count - 1 do begin
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then Continue;
		if (IsTarget_Debuffed_GetState(oTarget) > 0) or (oTarget.Dead) then begin
			result := True;
			Exit;
		end;
	end;
	if (DuoPartyMode) then begin
		if (GetCount_FriendlyBishopsDeadNear_NonParty(900) >= 2) then result := true;
		if (GetCount_FriendsDeadNear(900) >= 7) then result := true;
	end;
end;

function IsTime_ToBalanceLife: Boolean;
//checked
var
oTarget, oHealer: Tl2Char;
begin
	result := false;
	
	if (GetParty_AverageHp_AliveOnly < 55) then exit;
	
	oTarget := GetTarget_LowestHpAlive_Party;
  
	if not IsTarget_ValidAndVisible_Char(oTarget) then exit;
	
	if (oTarget.HP > 50)
	or (User.DistTo(oTarget) > 900) then Exit;
  
  
	if (User.Name = GetName_Healer1)
	and CharList.ByName(GetName_Healer2, oHealer)
	and IsTarget_ValidAndVisible_Char(oHealer)
	and (IsTarget_GoodState_Party(oHealer, 700))
	and (IsSkillReady_OtherBotChar(1335, oHealer.Name)) then Exit;
	
	result := true;
end;



function GetParty_AverageHp_AliveOnly: Integer;
var
i, counter, CurHp, TotalHp: Integer;
oTarget: Tl2Char;
begin
	result := 100;
	TotalHp := 0;
	counter := 1;
	for i := 0 to Party.Chars.Count - 1 do begin
	
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then Continue;
		if (oTarget = nil) then Continue;   
		if (oTarget.Dead) or (User.DistTo(oTarget) > MAX_RANGE) then continue;  
		
		TotalHp := TotalHp + oTarget.Hp;
		Inc(counter);
	end;
	
	if (counter < 1) then exit;
	result := Round(TotalHp / counter);
end;


function GetParty_AverageHp_DeadIncluded: Integer;
var
i, counter, CurHp, TotalHp: Integer;
oTarget: Tl2Char;
begin
	result := 100;
	TotalHp := 0;
	counter := 1;
	for i := 0 to Party.Chars.Count - 1 do begin
	
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then Continue;
		if (oTarget = nil) then Continue;   
		if (User.DistTo(oTarget) > MAX_RANGE) then continue;  
		
		if not (oTarget.Dead) then
			TotalHp := TotalHp + oTarget.Hp;
			
		Inc(counter);
	end;
	
	if (counter < 1) then exit;
	result := Round(TotalHp / counter);
end;

function IsTime_ToPartyUd_Pve: Boolean;
var
i, DeadCount : Integer;
oTarget: Tl2Char;
begin
	result := false;
	
	DeadCount := 0;
	for i := 0 to Party.Chars.Count -1 do begin
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then continue;
		if (oTarget.Dead)
		and (User.DistTo(oTarget) <= 900) then Inc(DeadCount);
	end;
	
	if (GetParty_AverageHp_AliveOnly < 55) 
	and (DeadCount < 4)
	and (GetCount_PartyBishopsAlive >= 1) then begin
		result := true;
	end;
end;

function IsTime_ToPartyUd_Pvp: Boolean;
var
i, DeadCount : Integer;
oTarget: Tl2Char;
begin
	result := false;
	
	DeadCount := 0;
	for i := 0 to Party.Chars.Count -1 do begin
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then continue;
		if (oTarget.Dead)
		and (User.DistTo(oTarget) <= 900) then Inc(DeadCount);
	end;
	
	if (GetParty_AverageHp_AliveOnly < 70) 
	and (DeadCount < 4)
	and (GetCount_PartyBishopsAlive >= 1) then begin
		result := true;
	end;
end;

function GetCount_PartyBishopsAlive: Integer;
var
i, count: Integer;
oTarget: Tl2Char;
begin
	count := 0;
	for i := 0 to Party.Chars.Count -1 do begin
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then continue;
		if (oTarget.Dead) or not (IsClass_Bp(oTarget.ClassId))then continue;
		if (User.DistTo(oTarget) > 900) then break;
		Inc(count);
	end;
	result := count;
end;

function IsTime_ToMassRez: Boolean;
var
i, DeadCount, MinDeadCount : Integer;
oTarget, heal1, heal2, oHealer: Tl2Char;
castForDuoParty: Boolean;
begin
	result := false;
	castForDuoParty := false;
	
	MinDeadCount := 4;
  
	if (CharList.ByName(GetName_Healer1, heal1) and IsTarget_ValidAndVisible_Char(heal1) and IsTarget_GoodState_Party(heal1, 900)) 
	or (CharList.ByName(GetName_Healer2, heal2) and IsTarget_ValidAndVisible_Char(heal2) and IsTarget_GoodState_Party(heal2, 900)) then begin
		MinDeadCount := 4;
	end else begin
		MinDeadCount := 5;
	end;
	DeadCount := 0;
	for i := 0 to Party.Chars.Count -1 do begin
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then continue;
		if (oTarget.Dead)
		and (User.DistTo(oTarget) <= 900) then Inc(DeadCount);
	end;
	
	if DuoPartyMode 
	and ((GetCount_FriendlyBishopsDeadNear_NonParty(900) >= 2) or (GetCount_FriendsDeadNear(900) >= 7)) then castForDuoParty := true;
	
	if (DeadCount < MinDeadCount) and not (castForDuoParty) then exit;
	
	if (User.Name = GetName_Healer1)
	and CharList.ByName(GetName_Healer2, oHealer)
	and IsTarget_ValidAndVisible_Char(oHealer)
	and (IsTarget_GoodState_Party(oHealer, 700))
	and (IsSkillReady_OtherBotChar(1254, oHealer.Name)) then Exit;	
		
	result := true;
end;

function IsTime_ToMajorGroupHeal: Boolean;
var
i, MinInjuredPartyCount, InjuredCount : Integer;
oTarget, heal1, heal2, oHealer: Tl2Char;
condition1, condition2: Boolean;
begin
	result := false;
	oHealer := user;
	
	condition1 := false;
	condition2 := false;
	
	MinInjuredPartyCount := 4;
	
	InjuredCount := 0;
	for i := 0 to Party.Chars.Count -1 do begin
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then continue;
		if (oTarget.Hp < 87)
		and not (oTarget.Dead)
		and (User.DistTo(oTarget) <= 900) then Inc(InjuredCount);
	end;
	if (InjuredCount > 4) then begin
		condition1 := true;
	end;
	
  
	InjuredCount := 0;
	for i := 0 to Party.Chars.Count -1 do begin
		oTarget := Party.Chars.Items(i);
		if not IsTarget_ValidAndVisible_Char(oTarget) then continue;
		if (oTarget.Hp < 85)
		and not (oTarget.Dead)
		and not (IsFriend_Invincible(oTarget))
		and (User.DistTo(oTarget) <= 900) then Inc(InjuredCount);
	end;
	
	if (InjuredCount >= MinInjuredPartyCount) then condition2 := true;
	
	
	if not ShouldICastSpell_Healers(1402) then Exit;	
		
	if IsAnyHealer_CastingSpellById(1402) then begin
		Exit;
	end;
		
		
	result := condition1 or condition2;
end;
function ShouldIAgro: Boolean;
var
oTank: Tl2Char;
begin
	result := true;
	if (User.Name = GetName_Sws) 
	and (CharList.ByName(GetName_Bd, oTank))
	and (IsTarget_GoodState_Party(oTank, 600))
	and (IsSkillReady_OtherBotChar(28, oTank.Name)) then result := false; //Aggresion
	
	if not HasSkill_Ready(28) then result := false;
end;

function GetTarget_MainAssist: Tl2Char;
var
i, partyNum: Integer;
oTarget: Tl2Char;
CharName: string;
MainAssistNameList: array of string;
begin  
	
	result := User;
	partyNum := GetPartyNum;
	if (partyNum = 1) then begin
		//Print('Find MA: 1st party');
		SetLength(MainAssistNameList, 6);
		MainAssistNameList[0] := 'iNuke';
		MainAssistNameList[1] := 'iSky';
		MainAssistNameList[2] := 'Immortality';
		MainAssistNameList[3] := 'iPain';
		MainAssistNameList[4] := 'Ragnator';
		MainAssistNameList[5] := 'iPole';
	end else if (partyNum = 2) then begin
		//Print('Find MA: 2nd party');
		SetLength(MainAssistNameList, 6);
		MainAssistNameList[0] := 'Undisputed';
		MainAssistNameList[1] := 'Insanity';
		MainAssistNameList[2] := 'iFury';
		MainAssistNameList[3] := 'Nastmine';
		MainAssistNameList[4] := 'Eviscerator';
		MainAssistNameList[5] := 'Tranquility';
	end else begin
		//Print('Find MA: 3rd party');
		SetLength(MainAssistNameList, 6);
		MainAssistNameList[0] := 'iNuke';
		MainAssistNameList[1] := 'iSky';
		MainAssistNameList[2] := 'Immortality';
		MainAssistNameList[3] := 'iPain';
		MainAssistNameList[4] := 'Ragnator';
		MainAssistNameList[5] := 'iPole';
	end;
	for i := 0 to Length(MainAssistNameList) - 1 do begin
		CharName := MainAssistNameList[i];
		//print('Check main assist by name: ' + CharName);
		if (CharName = User.Name) 
		and not (IsTarget_Disabled(user)) then begin
			result := user;
			Exit;
		end;
		
		//CharList.ByName(CharName, oTarget);
		if (Party.Chars.ByName(CharName, oTarget))
		and not (oTarget = nil)
		and (User.DistTo(oTarget) < MAX_ASSIST_RANGE_PVP) 
		and not (IsMainAssistDisabled(oTarget)) then begin
			result := oTarget;
			Exit;
		end;
	end;
end;

function SetTarget_MainAssist: Boolean;
var
ma: Tl2Char;
oLiveTarget: Tl2Live;
begin
	result := false;
	
	ma := GetTarget_MainAssist;
	if (ma = nil) or (ma = user) then begin
		//if (ma = User) then print('I am main assist!')
		//else Print('Main assist not found!');
		exit;
	end;// else print('Main assist found: ' + ma.Name);
	
	oLiveTarget := ma.Target;
	if (oLiveTarget = nil) then begin 
		//Print('Main assist does NOT have a target!');
		exit;
	end;
	if (PvpLoaded) then begin
		if not IsTarget_Valid_CharAsLive(oLiveTarget) then begin
			print('Pvp Assist: Main assist''s target is not valid. target = ' + oLiveTarget.Name);
			exit;
		end;
		if not (User.Target = oLiveTarget) then begin
			Engine.CancelTarget();
			Engine.SetTarget(oLiveTarget);
			Print('Pvp Assist: Assist ' + ma.Name + ' - target -> ' + oLiveTarget.Name);
		end;
		result := true;
	end else begin
		if not IsTarget_Valid_Live(oLiveTarget) then begin
			//print('Main assist''s target is not valid!');
			exit;
		end;
		if not (User.Target = oLiveTarget) then begin
			Engine.CancelTarget();
			Engine.SetTarget(oLiveTarget);
		end;
		//Print('Assist target found: ' + oLiveTarget.Name);
		result := true;
	end;
end;

function IsMainAssistDisabled(oMainAssist: Tl2Char): Boolean;
var
i: Integer;
oTargetsTarget, tempLive: Tl2Live;
oTarget: Tl2Char;
begin
	result := true;
	if not IsTarget_ValidAndVisible_Char(oMainAssist) then exit;
	if (IsTarget_Disabled(oMainAssist)) then exit;
	
	oTargetsTarget := oMainAssist.Target;
	if (oTargetsTarget = nil) then exit;
  
  
	if PvpLoaded and (CharList.ByName(oTargetsTarget.Name, oTarget)) then begin
		if (IsTarget_Friendly(oTarget))
		or (User.DistTo(oMainAssist) > MAX_ASSIST_RANGE_PVP) 
		or (IsClass_Tank(oTarget.ClassId) and not (IsOnlyTanksLeft)) then begin
			result := true;
			exit;
		end;
	end else begin
		if (not allowEmptyStringMobNames) and not (NpcList.ByName(oTargetsTarget.Name, tempLive)) then begin
			result := true;
			exit;
		end;
	end;
	result := false;
end;


function IsOnlyTanksLeft: Boolean;
//checked
var
i: Integer;
oTarget: Tl2Char;
begin
	result := true;
	for i := 0 to CharList.Count -1 do begin
		oTarget := CharList.Items(i);
		if (oTarget = nil) then begin
			WriteError('IsOnlyTanksLeft: oTarget = nil');
			Continue;
		end;
		if (IsTarget_Valid_Char(oTarget)) then begin
			if not (IsClass_Tank(oTarget.ClassID)) then begin
				result := false;
				exit;
			end;
		end;
	end;
end;

function IsOtherPlayersNearby(minRange: Integer): Boolean;
var
i: Integer;
oTarget: Tl2Char;
begin
	result := false;
	for i := 0 to CharList.Count - 1 do begin
		oTarget := CharList.Items(i);
		if (oTarget = nil) or (oTarget.Name = '') then continue;
		if not (oTarget.IsMember)
		and (User.DistTo(oTarget) < minRange) then begin
			result := true;
			Exit;
		end;
	end;


end;






function SetPoint_PartyCenter: void;
var
EndX, EndY, i, z, nCounter: Integer;
oTarget, obj, oLeader: Tl2Char;
begin
	PT_PX := User.X;
	PT_PY := User.Y;
	PARTY_PT_DIST := 0;
	
	nCounter := 1; //(1 because, we add Users location at start)
	EndX := User.X;
	EndY := User.Y;
	if not (DuoPartyMode) then begin
		for i := 0 to Party.Chars.Count - 1 do begin
			oTarget := Party.Chars.Items(i);
			if not IsTarget_ValidAndVisible_Char(oTarget) then begin
				continue;
			end;
			if (User.DistTo(oTarget) > MAX_RANGE_FRIEND) then break;
		
			EndX := EndX + oTarget.X;
			EndY := EndY + oTarget.Y;
			Inc(nCounter);
		end;
	end else begin
		for i := 0 to CharList.Count - 1 do begin
			oTarget := CharList.Items(i);
			if not IsTarget_ValidAndVisible_Char(oTarget) then begin
				continue;
			end;
			if (User.DistTo(oTarget) > MAX_RANGE_FRIEND) then break;
			
			if not (IsTarget_Friendly(oTarget)) then continue;
		
			EndX := EndX + oTarget.X;
			EndY := EndY + oTarget.Y;
			Inc(nCounter);
		end;
	end;
	
	if (nCounter >= 2) then begin
		EndX := EndX div nCounter;
		EndY := EndY div nCounter;
		PT_PX := EndX;
		PT_PY := EndY;
	end else begin
		if (CharList.ByName(GetName_LocalLeader, oLeader)) 
		and (User.DistTo(oLeader) < MAX_RANGE_FRIEND) then begin
			if (oLeader = nil) then WriteError('GetPartyCenterPoint: oLeader = nil');
			PT_PX := oLeader.X;
			PT_PY := oLeader.Y;
		end else begin
			PT_PX := user.X;
			PT_PY := user.y;
		end;
	end;
	z := User.z;
	PARTY_PT_DIST := User.DistTo(PT_PX, PT_PY, z);
end;

function ObjectDistTo_PartyCenter(obj: Tl2Spawn): Cardinal;
var
x, y: Integer;
begin
	result := 1000000;
	if (obj = nil) or ((obj.x = 0) and (obj.y = 0)) then exit;
	x := obj.x;
	y := obj.y;
	result := GetDistanceBetweenPoints(PT_PX, PT_PY, x, y);
end;

function GetPath_CharSettings: string;
begin
	result := Script.Path + 'Adrenalin Char Settings\\';
end;

function GetPath_FileSettings: string;
begin
	result := Script.Path + 'Adrenalin Folder Files\\';
end;
function GetPath_ZoneFolder: string;
begin
	result := Script.Path + 'Adrenalin Folder Files\\Settings\\';
end;

function cLoadZone(zoneName: string): Boolean;
begin
	result := Engine.LoadZone(GetPath_ZoneFolder + zoneName);
end;
function cLoadConfig(configName: string): Boolean;
begin
	result := Engine.LoadConfig(GetPath_CharSettings + configName);
end;

function GetName_Leader: string;
var
sName: string;
begin
	result := '';
	if (SettingList = nil) then Exit;
	sName := GetRowStrValueBelow('Leader:', SettingList);
	result := sName;
end;

function GetName_CoLeader: string;
var
sName: string;
begin
	result := '';
	if (SettingList = nil) then Exit;
	sName := GetRowStrValueBelow('CoLeader:', SettingList);
	result := sName;
end;

function GetName_SecondLeader: string;
var
sName: string;
begin
	result := '';
	if (SettingList = nil) then Exit;
	sName := GetRowStrValueBelow('SecondLeader:', SettingList);
	result := sName;
end;

function GetName_LocalLeader: string;
begin
	result := '';
	if (DuoPartyMode) then 
		result := GetName_Leader
	else if (GetPartyNum = 2) then 
		result := GetName_SecondLeader
	else
		result := GetName_Leader;
end;

function GetName_Server: string;
var
sName: string;
begin
	result := '';
	if (SettingList = nil) then Exit;
	sName := GetRowStrValueBelow('ServerName:', SettingList);
	result := sName;
end;


function GetName_Sws: string;
var
sName: string;
begin
	result := 'Elreolas';
end;
function GetName_Bd: string;
var
sName: string;
begin
	result := 'Unexpected';
end;
function GetName_Ee: string;
var
sName: string;
begin
	result := 'noSheyrena';
end;

function GetPartyNum: Integer;
var
oLeader: Tl2Char;
sLead1, sLead2: string;
begin
	result := 0;
	sLead1 := GetName_Leader;
	sLead2 := GetName_SecondLeader;
	
	if (User.Name = sLead1) then begin
		result := 1;
		exit;
	end else if (User.Name = sLead2) then begin
		result := 2;
		exit;
	end;
	
	
	if (Party.Chars.Count > 0) then begin
		if Party.Chars.ByName(sLead1, oLeader) then begin
			result := 1;
			exit;
		end else if (Party.Chars.ByName(sLead2, oLeader)) then begin
			result := 2;
			exit;
		end;		
	end;	
end;

function GetName_OtherHealer: string;
var
n1, n2, ownName: string;
begin
	result := '';
	n1 := GetName_Healer1;
	n2 := GetName_Healer2;
	ownName := User.Name;
	if (ownName = n1) then result := n2
	else if (ownName = n2) then result := n1;
end;

function GetName_Healer1: string;
var
sName: string;
begin
	result := '';
	if (SettingList = nil) then Exit;
	if (GetPartyNum = 2) then
		sName := GetRowStrValueBelow('Bishop_3:', SettingList)
	else
		sName := GetRowStrValueBelow('Bishop_1:', SettingList);
		
	result := sName;
end;
function GetName_Healer2: string;
var
sName: string;
begin
	result := '';
	if (SettingList = nil) then Exit;
	if (GetPartyNum = 2) then
		sName := GetRowStrValueBelow('Bishop_4:', SettingList)
	else
		sName := GetRowStrValueBelow('Bishop_2:', SettingList);
		
	result := sName;
end;


function GetTarget_ToFollow(): Tl2Char;
var
oTargetToFollow: Tl2Char;
begin
	result := User;
	if (User.Name = GetName_LocalLeader) then exit;
	if CharList.ByName(GetName_LocalLeader, oTargetToFollow) and (User.DistTo(oTargetToFollow) < 7000) then begin
		result := oTargetToFollow;		
	end else if CharList.ByName(Party.Leader.Name, oTargetToFollow) and (User.DistTo(oTargetToFollow) < 7000) then begin
		result := oTargetToFollow;	
	end;
end;

function GetRowIntValueBelow(SearchString: string; SettingList: TStringList): Integer;
begin
  if (SettingList = nil) then WriteError('GetRowIntValueBelow: SettingList = nil');
  result := StrToInt(SettingList[((SettingList.IndexOf(SearchString)) + 1)]);
end;
function GetRowStrValueBelow(SearchString: string; SettingList: TStringList): string;
begin
  if (SettingList = nil) then WriteError('GetRowStrValueBelow: SettingList = nil');
  result := SettingList[((SettingList.IndexOf(SearchString)) + 1)];
end;
function GetRowBoolValueBelow(SearchString: string; SettingList: TStringList): Boolean;
var
TrueFalse: string;
begin
  if (SearchString = null) then WriteError('GetRowBoolValueBelow: SearchString = nil');
  if (SettingList = nil) then WriteError('GetRowBoolValueBelow: SettingList = nil');
  TrueFalse := SettingList[((SettingList.IndexOf(SearchString)) + 1)];
  if (TrueFalse = 'true') then
    result := true
  else 
    result := false;
end;




function GetCount_DeadPartyWithinRange(nMaxRange: Integer): Integer;
var
i, DeadCount : Integer;
oTarget, cchar: Tl2Char;
begin
result := 0;
  DeadCount := 0;
  for i := 0 to Party.Chars.Count -1 do begin
    oTarget := Party.Chars.Items(i);
	if IsTarget_ValidAndVisible_Char(oTarget) then continue;
    if (oTarget.Dead)
    and (User.DistTo(oTarget) < nMaxRange) then Inc(DeadCount);
  end;
  result := DeadCount;
end;


function CheckMove_DeadParty_LeaderOnly: Boolean;
var
deadMember : Tl2Char;
TempX, TempY: Integer;
begin
	result := false;
	
	if not (User.Name = GetName_LocalLeader) then exit;
	
	//If we are not under attack:	
	if (GetCount_DeadPartyWithinRange(1500) > 0) then begin
		deadMember := GetTarget_NearestDead_Party(1500);
		if not IsTarget_ValidAndVisible_Char(deadMember) then Exit;
		if (User.DistTo(deadMember) > 150)
		and not (deadMember = User) then begin
			TempX := deadMember.X;
			TempY := deadMember.Y;
			if (deadMember.InZone) then begin
				if not (User.InZone) then begin
					MoveTo_BackToZone;
				end;
				if (User.InZone) then begin
					result := MapMove(TempX, TempY);
				end else begin
				
					//	if user is not in zone
					Engine.DMoveTo(TempX, TempY, 0);
					result := true;
				end;
			end else begin
			
				//  if deadMember is not in zone
				Engine.DMoveTo(TempX, TempY, 0);
				result := true;
			end;
		end;
	end;
end;



function MapMove(X, Y: Integer): boolean;
var
 i, j, stepX,stepY, nCurrentX, nCurrentY, nCurrentZ, z, TempX, TempY, count: integer;
 oItem : Tl2Item;
 WasBotOn: Boolean;
begin
	result := false; 

	if (User.Dead) then Exit;

	if not (user.inzone) then 
		MoveTo_BackToZone;
		
	
	
	if not (User.InZone) then Begin
		Print('MapMove_: Could not find out way back into farming zone, exit!');
		Exit;
	end;
	
	count := curPath.Count; 
	
	//  If path is not yet created, 
	if (count <= 0) or (curPath = nil) then begin
		curPath := TList.Create;
		TempX := User.x; 
		TempY := User.Y;
		Engine.FindPath(TempX, TempY, X, Y, curPath);
		curPathStep := 0;
	end;
	
	//	Check for old unfinished path.
	//	If last step is not near our destination, create new path
	if (count >= 2) then begin
		stepX := integer(curPath[count - 2]);
		stepY := integer(curPath[count - 1]);
		if (abs(stepX - X) > 75) and (abs(stepY - Y) > 75) then begin
			curPath.Free;
			curPath := TList.Create;
			TempX := User.x; 
			TempY := User.Y;
			Engine.FindPath(TempX, TempY, X, Y, curPath);
			curPathStep := 0;
		end;
	end;
	  
	
	//  At this point, path is created, so move
	
	//  Are we done?
	z := User.Z;
	if (user.InRange(X, Y, z, 100)) or (curPathStep > (count div 2) - 1)   then begin
		result := true;
		curPath.Free;
		curPath := TList.Create;
		curPathStep := 0;
		Exit;
	
	end else begin
		//	If we are not yet done, pick up where we left off
		stepX := integer(curPath[curPathStep*2]);
		stepY := integer(curPath[(curPathStep*2)+1]);
		TempX := User.x; 
		TempY := User.Y;
		
		//	Step Completed?
		if (abs(TempX - stepX) < 40) and (abs(TempY - stepY) < 40) then begin
			Inc(curPathStep);
			Exit;
		
		//	If step is not complete, move to end of step!
		end else begin
			LockCheck_MoveAndBot_Off;
			Engine.CancelTarget;
			Engine.DMoveTo(stepX, stepY, 0);
			Delay(1250);
			LockCheck_MoveAndBot_On;		
		end;
		
	end;
end;

function MoveTo_BackToZone: Boolean;
//checked
var
i, j, x, y, z, nRadius, nAngle, TempX, TempY: Integer;
begin
	result := false;
	x := 0;
	y := 0;
	z := User.z;
	if not (user.inzone) then begin
		for i:= 0 to 300 do begin
			for j := 0 to 72 do begin
				//Minimum range = 75
				nRadius := 75 + (5 * i);  //Start looking for a point at range = 75 distance away, and go up
				nAngle := 5*j; //Increase angle by 5 for every iteration
				TempX := User.X;
				TempY := User.Y;
				x := GetX_OnCircle(nRadius, TempX, nAngle);
				y := GetY_OnCircle(nRadius, TempY, nAngle);
				if (Engine.InZone(x, y, z)) then
					break;
			end;
			if (Engine.InZone(x, y, z)) then
				break;
		end;  
		if (Engine.InZone(x, y, z)) then begin
			Engine.DMoveTo(x, y, z);
			Delay(600);
			Engine.DMoveTo(x, y, z);
			Delay(600);
			result := true;
		end;
	end else begin
		result := true;
	end;
end;


function MoveToTarget_Timeout_Live(oTarget: Tl2Live; rangeToTarget, nTimeOut: Integer): Boolean;
var
movePoint: TPoint;
nTime, x1, x2, y1, y2, z: Integer;
begin
	result := false;
	if (oTarget = nil) or not oTarget.Valid then exit;
	
	nTime := 0;
	x1 := oTarget.X;
	y1 := oTarget.Y;
	x2 := User.X;
	y2 := User.Y;
	// negate rangeToTarget, so we get a point in front of target, instead of behind
	movePoint := GetPointBehindTargetFromTarget(x1, y1, x2, y2, -rangeToTarget);
	while true do begin
	
		if (oTarget = nil) then exit;
		if (User.DistTo(oTarget) <= rangeToTarget) 
		or (oTarget.Dead)
		or (nTime > nTimeOut) then break;
		
		z := oTarget.Z;
		Engine.DMoveTo(movePoint.X, movePoint.Y, z);
		
		Delay(300);
		nTime := nTime + 300;
	end;
	result := (not (oTarget = nil)) and (User.DistTo(oTarget) <= rangeToTarget);
end;

function MoveTo_TimeOut(x, y, z, nMaxTime: Integer): Boolean;
var
nIterations, i: Integer;
begin
	result := false;
	if (nMaxTime < 200) then nMaxTime := 200;
	nIterations := Round(nMaxTime / 200);
	
	for i := 1 to nIterations do begin
		Engine.DMoveTo(x, y, z);
		if (User.InRange(x, y, z, 25)) then begin
			result := true;
			exit;
		end;
		Delay(200);		
	end;	
end;

function IsUnderAttack: Boolean;
var
i, maxRange: Integer;
oTarget, oTargetsTarget: Tl2Live;
begin
	result := false;
	if (PvpLoaded = null) then WriteError('IsUnderAttack: PvpLoaded = null');
	result := PvpLoaded;
	if PvpLoaded then Exit;
	//if (GetMinPartyHp < 76) and (Party.Chars.Count > 0) and GetIsSomeMemberInCombat then result := true;
	
	
	
	if (isJava) then begin
		if (Party.Chars.Count < 2) then maxRange := 900
		else maxRange := MAX_RANGE_NPC_ATTACKING;
		for i := 0 to NpcList.Count -1 do begin
			oTarget := NpcList.Items(i);
			if (oTarget = nil) then begin
				WriteError('IsUnderAttack: oTarget = nil, Solved?');
				Continue;
			end;
			if (User.DistTo(oTarget) > maxRange) then break;
			if (oTarget.InCombat)
			and IsTarget_Valid_Live(oTarget)
			and IsTarget_OnUs_Live(oTarget) then begin
				result := true;
				Exit;
			end;
		end;
	end else begin
		for i := 0 to NpcList.Count -1 do begin
			oTarget := NpcList.Items(i);
			if (oTarget = nil) then begin
				Continue;
			end;
			oTargetsTarget := oTarget.Target;
			if (User.DistTo(oTarget) > MAX_RANGE_NPC_ATTACKING) then break;
			if ((oTargetsTarget.IsMember or (DuoPartyMode and (IsTarget_Friendly(oTargetsTarget))))
			or (oTargetsTarget = User))
			and IsTarget_Valid_Live(oTarget) then begin
				result := true;
				Exit;
			end;
		end;		
	end;
	if (result = null) then WriteError('IsUnderAttack: result = nil');
end;

function GetIsSomeMemberInCombat: Boolean;
var
i: Integer;
oTarget: Tl2Char;
begin
	result := false;
	if (User.InCombat) then begin
		result := true;
		exit;	
	end;
	
	for i := 0 to Party.Chars.Count - 1 do begin
		oTarget := Party.Chars.Items(i);
		if (oTarget = nil) or (not oTarget.Valid) or (oTarget.Name = '') then continue;
		if (User.DistTo(oTarget) > MAX_RANGE_FRIEND) then continue;
		if (oTarget.InCombat) then begin
			result := true;
			exit;
		end;
	end;
end;


function GetMinPartyHp: Integer;
//checked
var
i, nLastHp, nCurHp: Integer;
oTarget, cchar: Tl2Char;
begin 
  nLastHp := User.hp;
  for i := 0 to Party.Chars.Count -1 do begin
    oTarget := Party.Chars.Items(i);
	if (oTarget = nil) or (not (CharList.ByName(oTarget.Name, cchar))) then Continue;
	if(User.DistTo(oTarget) > 2000) then continue;
    nCurHp := oTarget.Hp;
	if (nCurHp < nLastHp) then nLastHp := nCurHp;
  end;
  result := nLastHp;
end;



function GetMinPartyMp: Integer;
//checked
var
i, nLastMp, nCurMp: Integer;
oTarget, cchar: Tl2Char;
begin
  nLastMp := User.Mp;
  for i := 0 to Party.Chars.Count -1 do begin
    oTarget := Party.Chars.Items(i);
	if (oTarget = nil) or (not (CharList.ByName(oTarget.Name, cchar))) then Continue;
	if(User.DistTo(oTarget) > 2000) then continue;
    nCurMp := oTarget.Mp;
	if (nCurMp < nLastMp) then nLastMp := nCurMp;
  end;
  result := nLastMp;
end;

function CheckFindNewMob: Boolean;
var
oTarget: Tl2Live;
x, y, z: Integer;
begin
	result := false;
	
	if (GetPartyNum = 2) then exit;
	
	if not (IsUnderAttack)
	and (GetMinPartyMp > 79)
	and (GetMinPartyHp > 75) then begin
		oTarget := GetTarget_NearestInZone_Pve();
		if (oTarget = nil) then exit;
		x := oTarget.X; y := oTarget.Y; z := oTarget.Z;
		result := Engine.DMoveTo(x, y, z);
		Delay(500);
	end;
end;


function WriteError(ErrorMessage : string): void;
var
ErrorStringList: TStringList;
StandardText, sFileName : string;
begin
	exit;
	if (ErrorMessage = '') then begin
		ErrorMessage := 'Empty string';
	end;
  sFileName := 'Fp_ErrorLog_' + User.Name + '.txt';
  ErrorStringList := TStringList.Create;
  
  if (fileexists(sFileName)) then
	ErrorStringList.LoadFromFile(sFileName);  
  
  
  
  StandardText := DateTimeToStr(now) + ' - ' + User.Name;
  
  ErrorStringList.Add(StandardText + ' - ' + ErrorMessage);
  Print(StandardText + ' - ' + ErrorMessage);
  ErrorStringList.SaveToFile(sFileName);
  
  ErrorStringList.Free();
end;








function GetKeyState(nVirtKey: integer): byte; stdcall;
external 'user32.dll' name 'GetKeyState' ;

function KeyDown(K : byte) : Boolean;
begin
	Result := (K = 128) or (K = 129)
end;

function SHIFT : boolean;
begin
	Result := KeyDown(GetKeyState($10));
end;

function CTRL : boolean;
begin
	Result := KeyDown(GetKeyState($11));
end;

function ALT : boolean;
begin
	Result := KeyDown(GetKeyState($12));
end;

function bHALF : boolean;
begin
	Result := KeyDown(GetKeyState($DC));
end;


function cEnterText(msg: string): Boolean;
begin
	while ALT do delay(150);
	result := Engine.EnterText(msg);
end;

procedure Anti_EventPopup;
var
counter: Integer;
sMessage, lastMessage: string;
player: Tl2Char;
begin
	counter := 0;
	lastMessage := '';
	while true do begin
		sMessage := Engine.ConfirmDlg.Sender;
		if not (CharList.ByName(sMessage, player)) then begin
			if (not (lastMessage = sMessage)) then begin
				lastMessage := sMessage;
				Print('Popup message changed: ' + sMessage);
				Delay(500);
				while (alt) do delay(500);
				Engine.UseKey('Enter');
			end;
		end;
		if ((counter mod 200) = 1) then begin
			while (alt) do delay(500);
			Engine.UseKey('Enter');
			Print('Popup message changed: ' + sMessage);
		end;
		Delay(3000);
		Inc(counter);
	end;
end;

function IsSpoilCorpseNear: Boolean;
var
i: Integer;
begin
  result := false;
  for i := 0 to NpcList.Count - 1 do begin
    if (User.DistTo(NpcList.Items(i)) > 300 ) then break;
    if (NpcList.Items(i).Dead)
    and (NpcList.Items(i).Sweepable) then begin
      result := true;
      Exit;
    end;
  end;

end;


function CheckSweep: boolean;
begin
	result := false;
    if (IsSpoilCorpseNear) then begin
		Engine.UseSkill(444);
		result := true;
    end;
end;



function GetOutOfCombat: void;
var
counter : Integer;
begin
	if not (IsUnderAttack) then begin
		Engine.FaceControl(0, False);
		Exit;
	end;
	counter := 0;
	while (User.InCombat) and not (User.Dead) do begin
		while (IsUnderAttack) and not (User.Dead) do begin
			if not(Engine.GetFaceState(0)) then
				Engine.FaceControl(0, true);
	
			Delay(500);
			if not (IsUnderAttack) then begin
				Engine.FaceControl(0, false);
				print('Waiting to get out of combat...');
				Delay(2000 + Random(3000));
				if not (User.InCombat) then break;
			end;
		end;  
		Delay(500);
		Inc(counter);
		if (counter > 100) then break;
	end;
	Engine.FaceControl(0, False);
	Delay(3000);
end;


function Check_ClusterCharge_Pvp(): Boolean;
var
dist: Integer;
begin
	result := false;
	
	if (SetTarget_MostClustered_Pvp) then begin
	
		if (User.Target = nil) then Exit;
		
		dist := User.DistTo(user.target);
		if (dist > 350) then begin
			if (HasSkill_Ready(995)) 
			and (dist < 600) then begin
			
				result := Engine.UseSkill(995);
			
			end else if (HasSkill_Ready(994))
			and (dist < 400) then begin
			
				result := Engine.UseSkill(994);
			
			//end else if (HasSkill_Ready(484))
			//and (dist < 400) then begin
			
				//result := Engine.UseSkill(484);
			
			end;
		
		end;	
	end;
end;
function Check_ClusterCharge_Pve(): Boolean;
var
dist: Integer;
begin
	result := false;
	if (SetTarget_MostClustered_Pve) then begin
		
		if (User.Target = nil) then Exit;
	
		dist := User.DistTo(user.target);
		if (dist > 250) then begin
			if (HasSkill_Ready(995)) 
			and (dist < 600) then begin
				
				result := Engine.UseSkill(995);
			
			end else if (HasSkill_Ready(994))
			and (dist < 400) then begin
			
				result := Engine.UseSkill(994);
			
			//end else if (HasSkill_Ready(484))
			//and (dist < 400) then begin
			
				//result := Engine.UseSkill(484);
			
			end;
		
		end;	
	end;
end;

function CheckUse_Charge(oTarget: Tl2Live): Boolean; Overload;
var
dist: Integer;
begin
	result := false;
	if (oTarget = nil) then Exit;
	
	dist := User.DistTo(oTarget);
	if (dist > 350) then begin
		if (HasSkill_Ready(995)) 
		and (dist < 600) then begin
				
			result := Engine.UseSkill(995);
			
		end else if (HasSkill_Ready(994))
		and (dist < 400) then begin
			
			result := Engine.UseSkill(994);
			
		//end else if (HasSkill_Ready(484))
		//and (dist < 400) then begin
			
			//result := Engine.UseSkill(484);
			
		end;
		
	end;
end;
function CheckUse_Charge(oTarget: Tl2Char): Boolean; Overload;
var
dist: Integer;
begin
	result := CheckUse_Charge(oTarget as Tl2Live);
end;

function CheckUse_FinalSecret(): Boolean;
begin
	result := false;
	if HasSkill_Ready(917) and not IHaveBuff(917) then begin
		result := true;
		print('Use final secret!');
		Engine.UseSkill(917);
	end;
end;

function InitializeVariables: void;
var
path: string;
begin
	
	//Game mode?
	interlude := false;
	canBuffNoblesse := true;
	isJava := true;
	DiscreteMode := false;
	PvpEnabled := true;
	
	DuoPartyMode := false;

	allowEmptyStringMobNames := true;
	
	playerDetectDistance := 4500;

	MONSTER_SOCIAL_RANGE 			:= 0;
	MAX_MOB_ON_US_RANGE				:= 900;
	MAX_RANGE 						:= 1000;
	MAX_RANGE_FRIEND				:= 1600;
	MAX_RANGE_AOE 					:= 300;
	MAX_RANGE_NPC_SEARCH 			:= 3000;
	MAX_RANGE_NPC_ATTACKING			:= 1600;
	MAX_DISTANCE_TO_PARTY_FOR_AOE 	:= 900;
	MAX_ASSIST_RANGE_PVP			:= MAX_RANGE;
	MAX_PARTY_PT_DIST				:= 700;
	MAX_RANGE_PVP_SEARCH			:= MAX_RANGE;

	FOLLOW_DIST := 100;
	FOLLOW_RANDOM_TIME_CHANGE := 3000; //Changes to a new random point every 3 seconds.
	FOLLOW_RANDOM_RANGE := 45;
	FOLLOW_Random_X := 0;
	FOLLOW_Random_Y := 0;
	
	AOE_PX := 0;
	AOE_PY := 0;
	AOE_PT_DIST := 0;
	PT_PX := 0;
	PT_PY := 0;
	PARTY_PT_DIST := 0;
	curPathStep := 0;
	curPath := TList.Create;
	pullMobs_Cooldown := 0;
	weaponOid := 0;
	
	LastAttackTime := 0;
	
	
	(*
	LastAttackTime := User.AtkTime;
	TimeSinceLastAttack := LastAttackTime;
	
	AttackStartTime := MsToTime(LastAttackTime);	
	StartTime := now;
	TotalTimePassed := 0;
	
	print('Total Time passed = ' + IntToStr(GetMillisecondsInBetween(StartTime, now)));
	print('Time Since last Attack = ' + IntToStr(TimeSinceLastAttack));
	*)
	LowHpSettingLoaded := false;
	LowHpMode := false;
	DiscreteLoaded := false;
	PvpLoaded := false;
	PveLoaded := false;
	TempOff := false;
	IsMoving := false;
	MoveLock := false;
	TotalPause := false;
	CombatEnabled := true;
	CircleAgroMode := false;
	PlayersNearby := false;
	AA_GoClose := false;
	AA_GoVeryClose := false;
	AA_AssistPk := false;
	AA_BringMobsMode := false;
	tempBuffBotPause := false;
	SOS_POP_MODE := false;
	SOS_TargetFound := false;
	LowHp_TargetFound := false;
	TargetSearch_LowestFirst := true;
	
	
	SettingList := TStringList.Create;
	SettingList.LoadFromFile(GetPath_FileSettings + 'Pvp_Settings.txt'); 
	print('Leader: ' + GetName_Leader);
	print('Server: ' + GetName_Server);


	ClanList := TStringList.Create;
	ClanList.LoadFromFile(GetPath_FileSettings + 'Pvp_ClanExceptions.txt');
	FriendList := TStringList.Create;
	FriendList.LoadFromFile(GetPath_FileSettings + 'Pvp_PlayerExceptions.txt');
	
	
    UdEffectList := TStringList.Create;
    UdEffectList.LoadFromFile(GetPath_FileSettings + 'Pvp_UD_Skills.txt');
	
	DbfImnEffectList := TStringList.Create;
    DbfImnEffectList.LoadFromFile(GetPath_FileSettings + 'Pvp_DebuffImmune_Skills.txt'); 
	
	UltimateEffectList := TStringList.Create;
    UltimateEffectList.LoadFromFile(GetPath_FileSettings + 'Pvp_Ultimate_Skills.txt'); 
	
    DebuffList_1 := TStringList.Create;
    DebuffList_1.LoadFromFile(GetPath_FileSettings + 'Pvp_Cleanse_DebuffNames_1.txt');
    DebuffList_2 := TStringList.Create;
    DebuffList_2.LoadFromFile(GetPath_FileSettings + 'Pvp_Cleanse_DebuffNames_2.txt');
    DebuffList_3 := TStringList.Create;
    DebuffList_3.LoadFromFile(GetPath_FileSettings + 'Pvp_Cleanse_DebuffNames_3.txt');
	
	DisabledEffectList := TStringList.Create;
	DisabledEffectList.LoadFromFile(GetPath_FileSettings + 'Pvp_DisabledEffects.txt');
	
	BuffList_Mage := TStringList.Create;
	BuffList_Mage.LoadFromFile(GetPath_FileSettings + 'Pvp_BuffList_Mage.txt');
	
	BuffList_Fighter := TStringList.Create;
	BuffList_Fighter.LoadFromFile(GetPath_FileSettings + 'Pvp_BuffList_Fighter.txt');
	
	Mail_List := TStringList.Create;
	Mail_List.LoadFromFile(GetPath_FileSettings + 'Pvp_MailItems_IdList.txt');
	
	
	
	ClassList := TStringList.Create;
	if (User.Level < 86) then
		ClassList.LoadFromFile(GetPath_FileSettings + 'Pvp_ClassPriority.txt')
	else 
		ClassList.LoadFromFile(GetPath_FileSettings + 'Pvp_ClassPriority_Helios_Sigel.txt');
		
    ClassProtectionList := TStringList.Create;
    ClassProtectionList.LoadFromFile(GetPath_FileSettings + 'Pvp_ClassProtectionPriority.txt');
    ClassAgroList:= TStringList.Create;
    ClassAgroList.LoadFromFile(GetPath_FileSettings + 'Pvp_ClassAgroPriority.txt');
	
	CommandSenderList := TStringList.Create;

	fighterBuffExceptionList := TStringList.Create;
	fighterBuffExceptionList.Add('4703'); //Pony reuse buff
	fighterBuffExceptionList.Add('1004');//Paagrio Wisdom (Acumen)
	fighterBuffExceptionList.Add('1397');//Clarity
	
	fighterCasterBuffExList := TStringList.Create;
	fighterCasterBuffExList.Add('4703'); //Pony reuse buff
	fighterCasterBuffExList.Add('1397');//Clarity
	
	mageBuffExceptionList := TStringList.Create;
	mageBuffExceptionList.Add('1519');//Chant of blood awakening
	mageBuffExceptionList.Add('4699');//Blessing of Queen
	mageBuffExceptionList.Add('982');//Combat Aura
	mageBuffExceptionList.Add('1537');//Paagrio Crit Combi
	

	skillRecordList := TList.Create;

end;



function ResetVariables: void;
begin
	
	//Game mode?
	canBuffNoblesse := true;
	DiscreteMode := false;
	PvpEnabled := true;
	

	allowEmptyStringMobNames := true;
	
	playerDetectDistance := 4500;

	MONSTER_SOCIAL_RANGE 			:= 0;
	MAX_MOB_ON_US_RANGE				:= 900;
	MAX_RANGE 						:= 1000;
	MAX_RANGE_FRIEND				:= 1600;
	MAX_RANGE_AOE 					:= 300;
	MAX_RANGE_NPC_SEARCH 			:= 3000;
	MAX_RANGE_NPC_ATTACKING			:= 1600;
	MAX_DISTANCE_TO_PARTY_FOR_AOE 	:= 900;
	MAX_ASSIST_RANGE_PVP			:= MAX_RANGE;
	MAX_PARTY_PT_DIST				:= 700;
	MAX_RANGE_PVP_SEARCH			:= MAX_RANGE;

	FOLLOW_DIST := 100;
	FOLLOW_RANDOM_TIME_CHANGE := 3000; //Changes to a new random point every 3 seconds.
	FOLLOW_RANDOM_RANGE := 45;
	FOLLOW_Random_X := 0;
	FOLLOW_Random_Y := 0;
	
	
	LowHpMode := false;
	TempOff := false;
	IsMoving := false;
	MoveLock := false;
	TotalPause := false;
	CombatEnabled := true;
	CircleAgroMode := false;
	PlayersNearby := false;
	AA_GoClose := false;
	AA_GoVeryClose := false;
	AA_AssistPk := false;
	AA_BringMobsMode := false;
	tempBuffBotPause := false;
	SOS_POP_MODE := false;
	SOS_TargetFound := false;
	LowHp_TargetFound := false;

end;






function GetClosestNpcOfId(NpcId: Integer): Tl2Live;
var
i: Integer;
oTarget: Tl2Live;
begin
	result := User as Tl2Live;
	for i := 0 to NpcList.Count - 1 do begin
		oTarget := NpcList.Items(i);
		if (oTarget = nil) then Continue;
		if (User.DistTo(oTarget) > MAX_RANGE_NPC_SEARCH) then break;
		if (oTarget.Id = NpcId) then begin
			result := oTarget;
			Exit;
		end;	
	end;
end;

function HasSkill_Ready_Interval(nSkillId, interval_ms: Integer): Boolean;
var
skillRecord_Index, tempMilli: Integer;
skillRecord: TSkillRecord;
begin
	result := false;
	if HasSkill_Ready(nSkillId) then begin
		skillRecord_Index := IndexOf_SkillRecord_BySkillId(nSkillId);
		if (skillRecord_Index >= 0) then begin
			skillRecord := TSkillRecord(skillRecordList[skillRecord_Index]);
			if (skillRecord.skillId = nSkillId) then begin
				tempMilli := GetMillisecondsInBetween(skillRecord.lastUse, now);
				if (tempMilli >= interval_ms) then begin
					//At this point, the interval since last use has passed, and skill can now be used again.
					result := true;
					exit;
				end else begin
					print('Skill Interval:  Skill with ID = ' + IntToStr(nSkillId) + '  was not ready...    ' + IntToStr(interval_ms - tempMilli) + ' ms remains...');
				end;
			end else
				result := true;
		end else 
			result := true;
	end;
end;

function IndexOf_SkillRecord_BySkillId(nSkillId: Integer): Integer;
var
i: Integer;
skillRecord: TSkillRecord;
begin
	result := -1;
	if (skillRecordList = nil) or (skillRecordList.Count <= 0) then exit;
	for i := 0 to skillRecordList.Count - 1 do begin
		skillRecord := TSkillRecord(skillRecordList[i]);
		if (skillRecord = nil) or (skillRecord.skillId = 0) then continue;
		if (skillRecord.skillId = nSkillId) then begin
			result := i;
			exit;
		end;
	end;
end; 

function UseSkill_SetInterval(nSkillId, intervalToSet: Integer; force: Boolean = false): Boolean;
var
newRecord, skillRecord: TSkillRecord;
skillRecord_Index: Integer;
begin
	//Set cd per SKILL ID
	//Set a time 	DATE Time
	result := false;
	if HasSkill_Ready(nSkillId) then begin
		skillRecord_Index := IndexOf_SkillRecord_BySkillId(nSkillId);
		if (skillRecord_Index >= 0) then begin
			//Skill exists in list, use it, and update lastUse
			skillRecord := TSkillRecord(skillRecordList[skillRecord_Index]);
			if not (skillRecord.skillId = nSkillId) or (skillRecord = nil) then begin
				WriteError('something is very wrong, skillRecord recognized but then not');
				exit;
			end;
			if CUseSkill(nSkillId, force, false, Engine.GetFaceState(0)) then begin
				TSkillRecord(skillRecordList[skillRecord_Index]).lastUse := now;
				result := true;
			end;
		end else begin
			// Skill doesnt exist in list, use it, and add it to list
			if CUseSkill(nSkillId, force, false, Engine.GetFaceState(0)) then begin
				newRecord := TSkillRecord.Create();
				newRecord.lastUse := now;
				newRecord.skillId := nSkillId;
				skillRecordList.Add(newRecord);
				print('Added a new skill record to list.  Added skill with ID = ' + IntToStr(nSkillId));
				result := true;
			end;
		end;
	end;
end;


function SetInterval_OnSkillId(nSkillId, intervalToSet: Integer; force: Boolean = false): Boolean;
var
newRecord, skillRecord: TSkillRecord;
skillRecord_Index: Integer;
begin
	//Set cd per SKILL ID
	//Set a time 	DATE Time
	result := false;
	skillRecord_Index := IndexOf_SkillRecord_BySkillId(nSkillId);
	if (skillRecord_Index >= 0) then begin
		//Skill exists in list, use it, and update lastUse
		skillRecord := TSkillRecord(skillRecordList[skillRecord_Index]);
		if not (skillRecord.skillId = nSkillId) or (skillRecord = nil) then begin
			WriteError('something is very wrong, skillRecord recognized but then not');
			exit;
		end;
		TSkillRecord(skillRecordList[skillRecord_Index]).lastUse := now;
		result := true;
	end else begin
		// Skill doesnt exist in list, use it, and add it to list
		newRecord := TSkillRecord.Create();
		newRecord.lastUse := now;
		newRecord.skillId := nSkillId;
		skillRecordList.Add(newRecord);
		print('Added a new skill record to list.  Added skill with ID = ' + IntToStr(nSkillId));
		result := true;
	end;
end;

function HasIntervalPassed_BySkillId(nSkillId, interval_ms: Integer): Boolean;
var
skillRecord_Index, tempMilli: Integer;
skillRecord: TSkillRecord;
begin
	result := false;
	skillRecord_Index := IndexOf_SkillRecord_BySkillId(nSkillId);
	if (skillRecord_Index >= 0) then begin
		skillRecord := TSkillRecord(skillRecordList[skillRecord_Index]);
		if (skillRecord.skillId = nSkillId) then begin
			tempMilli := GetMillisecondsInBetween(skillRecord.lastUse, now);
			if (tempMilli >= interval_ms) then begin
				//At this point, the interval since last use has passed, and skill can now be used again.
				result := true;
				exit;
			end else begin
				//print('Skill Interval:  Skill with ID = ' + IntToStr(nSkillId) + '  was not ready...    ' + IntToStr(interval_ms - tempMilli) + ' ms remains...');
			end;
		end else
			result := true;
	end else 
		result := true;
end;

function CUseSkill(nSkillId : Integer; force, shift, botWasOn: Boolean): Boolean; Overload;
var
count, x, y, z : Integer;
begin
	result := false;
	count := 0;
	if not HasSkill_Ready(nSkillID) then exit;
	
	if botWasOn then Engine.FaceControl(0, false);
	while (User.Cast.EndTime > 200) and (User.Cast.EndTime < 2000) do Delay(40);
	//while (User.Cast.EndTime <= 0) and (HasSkill_Ready(nSkillId)) do begin
	while (count < 8) and (HasSkill_Ready(nSkillId)) do begin
		Engine.DUseSkill(nSkillId, force, shift);
		Delay(40);
		count := count + 1 ;
		//if (count > 15) then break;
	end;
	
	if (count < 8) then begin
		result := true;
	end;
	
	if botWasOn then Engine.FaceControl(0, true);
end;

function CUseSkill(nSkillId : Integer; force, shift, botWasOn: Boolean; oTarget: Tl2Live; range: Integer = 900): Boolean; Overload;
var
count, moveCount, x, y, z : Integer;
begin
	result := false;
	count := 0;
	if not HasSkill_Ready(nSkillID) then exit;
	
	if (oTarget = nil) or not (oTarget.Valid) then begin
		print('UseSkill: Warning, target passed was nil or not valid');
		exit;
	end;
	
	if botWasOn then Engine.FaceControl(0, false);
	
	moveCount := 0;
	x := oTarget.X; y := oTarget.Y; z := oTarget.Z;
	while (User.DistTo(oTarget) > range) do begin
		Engine.DMoveTo(x, y, z);
		Delay(300);
		x := oTarget.X; y := oTarget.Y; z := oTarget.Z;
		moveCount := moveCount + 1;
		if (moveCount > 5) then begin
			result := true;
			if botWasOn then Engine.FaceControl(0, true);
			exit;
		end;
	end;
	
	while (User.Cast.EndTime > 200) and (User.Cast.EndTime < 2000) do Delay(40);
	//while (User.Cast.EndTime <= 0) and (HasSkill_Ready(nSkillId)) do begin
	while (count < 8) and (HasSkill_Ready(nSkillId)) do begin
		Engine.DUseSkill(nSkillId, force, shift);
		Delay(40);
		count := count + 1 ;
		//if (count > 15) then break;
	end;
	
	
	if (count < 8) then begin
		result := true;
	end;
	
	if botWasOn then Engine.FaceControl(0, true);
end;

function CUseSkill(nSkillId : Integer; force, shift, botWasOn: Boolean; oTarget: Tl2Char; range: Integer = 900): Boolean; Overload;
var
count, x, y, z : Integer;
begin
	CUseSkill(nSkillId, force, shift, botWasOn, (oTarget as Tl2Live), range);
end;

function GetMillisecondsInBetween(time1, time2: TDateTime): Cardinal;
var
time_to_ms: Cardinal;
begin
	//				ms	 sec  min  hour
	time_to_ms := 86400000; //; 1000 * 60 * 60 * 24 = 86 400 000
	result := abs ( Round( (time1 - time2) * time_to_ms ) );
end;

function TimeToMs(cTime: TDateTime): Cardinal;
begin
	result := Cardinal(cTime * 86400000);
end;
function MsToTime(ms: Cardinal): TDateTime;
begin
	result := ms / 86400000;
end;

function PrintAbnormalBitString(abnormalId: Cardinal): void;
var
data : int64;
i: Integer;
begin

	if (abnormalId = 0) then exit;
	data := int64(abnormalId);
    for i := 31 downto 0 do begin
        if ((data shr i) and 1) = 1 then print('1  i = ' + IntToStr(i))
        else print('0  i = ' + IntToStr(i));
	end;
end;

function IsAbnormalActive(searchId, abnormalId: Cardinal): Boolean;
var
data : int64;
i, index: Integer;
begin
	result := false;
	if (abnormalId = 0) then exit;
	//print('Start pringint gvalues');
	//PrintAbnormalBitString(abnormalId);
	data := int64(abnormalId);
	index := GetBitIndex_FromAPowerOfTwo(searchId);
	if (index < 0) then exit;
    //for i := 31 downto 0 do begin
	if ((data shr index) and 1) = 1 then begin
		//	if (i = index) then begin
				//print('Active Abnormal! i = index     ' + IntToStr(i) + ' = ' + IntToStr(index));
		result := true;
		exit;
		//	end;
	end;
	//end;
(*//data := $01 + ($00 shl 8 ) + ($00 shl 16 ) + ($FF shl 24);
data := int64(searchId);
    for i := 31 downto 0 do
        begin
          if ((data shr i) and 1) = 1 then print('data bit was one  i = ' + IntToStr(i))
          else print('data Bit was Zero  i = ' + IntToStr(i));
          end;
end;*)
end;

function GetBitIndex_FromAPowerOfTwo(po2: cardinal): Integer;
var
num : int64;
i: Integer;
begin
	num := 1;
	//print('GetBit : Search for num = ' + IntToStr(po2));
	for i := 0 to 31 do begin
		if (po2 = num) then begin
			//print('GetBit : found for i = ' + IntToStr(i));
			result := i;
			exit;
		end;
		num := num * 2;
	end;
	//print('GetBit : Not Recognized!');
	result := -1;
end;

function SetWeaponEquipped: Boolean;
var
i: Integer;
oWep: Tl2Item;
begin
	result := false;
	weaponOid := 0;
	for i := 0 to Inventory.User.Count - 1 do begin
		oWep := Inventory.User.Items(i);
		if (oWep.ItemType = 0) and (oWep.Equipped) then begin
			result := true;
			weaponOid := oWep.Oid;
			print('Recognized Main Weapon: ' + oWep.Name);
			exit;
		end;	
	end;
	print('WARNING: No equipped weapon found!');
end;

function IsWeaponEquipped: Boolean;
var
i: Integer;
oWep: Tl2Item;
begin
	result := false;
	for i := 0 to Inventory.User.Count - 1 do begin
		oWep := Inventory.User.Items(i);
		if (oWep.ItemType = 0) and (oWep.Oid = weaponOid) and (oWep.Equipped) then begin
			result := true;
			exit;
		end;	
	end;
end;

function EquipLowerWeapon: Boolean;
var
i, wepId: Integer;
oWep: Tl2Item;
begin
	result := false;
	
	if IsClass_Tyrant(User.ClassId) then begin
	
	end else if IsClass_Destro(User.ClassId) then begin
	
	end else if IsClass_Destro(User.ClassId) then begin
	
	end;
	
	
	for i := 0 to Inventory.User.Count - 1 do begin
		oWep := Inventory.User.Items(i);
		if (oWep.ItemType = 0) and (oWep.Oid = weaponOid) and (oWep.Equipped) then begin
			result := true;
			exit;
		end;	
	end;
end;


function EquipWeapon: Boolean;
var
i: Integer;
oWep: Tl2Item;
begin
	result := false;
	for i := 0 to Inventory.User.Count - 1 do begin
		oWep := Inventory.User.Items(i);
		if (oWep.ItemType = 0) and (oWep.Oid = weaponOid) and (not oWep.Equipped) then begin
			result := Engine.UseItem(oWep);
			exit;
		end;	
	end;
end;

function CheckDisarm(): Boolean;
var
oBuff: Tl2Buff;
begin
	result := false;
	if (weaponOid = 0) then begin
		print('WARNING: No Main Weapon!!!');
		exit;
	end;
	//if (LowHpMode) then begin
		//EquipLowerWeapon;
		//exit;
	//end;
	if not IsWeaponEquipped then begin
		if not User.Buffs.ById(485, oBuff) and not User.Buffs.ById(794, oBuff) then begin	//Check disarm debuffs
			result := EquipWeapon;
			Delay(1500);
		end;
	end;
end;


function wrap_Do_L2Idle_Rebuff: Boolean;
begin
	result := Do_L2Idle_Rebuff;
end;

function CompleteAutoFarm: void;
var
lastLoadedZone, nZone, x, y, z, lastX, lastY, lastZ, posCount, counter: Integer;
clanRep: Boolean;
begin
	clanRep := IsClass_Sps(User.ClassId);
	if (clanRep) then begin
		print('Class Spellsinger detected, enable clan rep mode. Auto open packages/equip start gear');
		delay(1000);
	end;
	if IsClass_Sph(User.ClassId) then
		cLoadConfig('auto_sph.xml')
	else 
		cLoadConfig('auto_farm.xml');
	lastLoadedZone := 0;
	lastX := User.X; lastY := User.Y; lastZ := User.Z;
	posCount := 0;
	
	while true do begin
		Delay(2000);
		CheckUseNewbieItems(clanRep);
		
		x := User.X; y := User.Y; z := User.Z;
		if (x = lastX) and (y = lastY) and (z = lastZ) then begin
			posCount := posCount + 1;
			//Print('Position same as last, posCount = ' + IntToStr(posCount));
			if (posCount > 40) and DetectStuck then begin
				Print('We have been standing the same place for too long, minimize/maximize to un-stuck.');
				Unstuck;
				posCount := 0;
			end;
		end else begin
			lastX := x;
			lastY := y;
			lastZ := z;
			posCount := 0;
			
			//Print('Position changed. posCount = ' + IntToStr(posCount));
		end;
		
		
		if (User.Dead) then begin
			Engine.GoHome();
			Delay(15000);
			Continue;
		end else if (User.Buffs.Count < 15) then begin //Missing Buffs
			Print('Buffs missing, go rebuff');
			GetOutOfCombat;
			DoRebuff;
			if DetectStuck then begin
				print('We cannot move!');
				continue;
			end;
			if (User.Level >= 20) and (User.DistTo(147803, -55348, -2728) < 500) then begin
				if Restock then begin
					Print('Restart game in order to leave Multisell chat field.');
					Engine.Restart();
					Delay(1000);
					Engine.GameStart();
					Delay(18000);
					counter := 0;
					x := User.X; y := User.Y; z := User.Z;
					Print('Initiate Minimize/Maximize procedure');
					Engine.SetGameWindow(true);
					Delay(3000);
					Engine.SetGameWindow(false);
					Delay(2000);
					Unstuck; //Anti relog movement bug.
					
				end;
			end;
			Continue;
		end else begin
			GoTo_Spot;
		end;
		
		nZone := GetZone;
		if (lastLoadedZone = 0) or not(lastLoadedZone = nZone) then begin
			Print('Load combat zone: ' + IntToStr(nZone));
			lastLoadedZone := SetZone;
		end;
		
		
	end;

end;

function CheckUseNewbieItems(clanRep: Boolean): Boolean;
var
oItem: Tl2Item;
begin
		if (Inventory.User.ById(21606, oItem)) then begin
			Engine.UseItem(21606);
			Delay(2000);
		end;
		if (Inventory.User.ById(20635, oItem)) then begin
			Engine.UseItem(20635);
			Delay(2000);
		end;
		if (Inventory.User.ById(20637, oItem)) then begin
			Engine.UseItem(20637);
			Delay(2000);
		end;
	if (clanRep) then begin
			
		if (User.level <= 19) then begin
			CheckHaveEquipItem(8977);
			CheckHaveEquipItem(9034);
			CheckHaveEquipItem(9035);
		end else if (User.Level >= 20) and (User.Level < 40) then begin
			CheckHaveEquipItem(20649);
			CheckHaveEquipItem(20650);
			CheckHaveEquipItem(20651);
			CheckHaveEquipItem(20652);
			CheckHaveEquipItem(20653);
			CheckHaveEquipItem(20645);
		end;
		
		if (User.Level >= 40) then begin
			print('We are level 40! Collect clan rep!');
			Engine.BlinkWindow();
		end else if (User.Level > 19) and (User.ClassId = 25) then begin
			print('We are level 20! Change class!');
			Engine.BlinkWindow();
		end;
		
	end;
end;

function CheckHaveEquipItem(itemId: Integer): Boolean;
var
oItem: Tl2Item;
begin
	if (Inventory.User.ById(itemId, oItem)) then begin
		if not (oItem.Equipped) then begin
			Engine.UseItem(oItem);
			Delay(1500);
		end;
	end;
end;

function DetectStuck: Boolean;
var
x, y, z, randX, randY: Integer;
begin
	result := false;
	if (User.Dead) then exit;
	x := User.X; y := User.Y; z := User.Z;
	while (User.Cast.EndTime > 0) do delay(250);
	
	if (Random(2) = 1) then 
		randX := 40
	else  
		randX := -40;
		
	if (Random(2) = 1) then 
		randY := 40
	else  
		randY := -40;
	
	if not Engine.MoveTo(x + randX, y + randY, z) then begin
		Print('Warning we are stuck!');
		result := true;
	end;
end;

function Unstuck: Boolean;
var
counter: Integer;
begin
	result := false;
	Print('Unstuck: Maximize/Minimize!');
	counter := 0;
	while (DetectStuck) do begin
		Engine.SetGameWindow(true);
		Print('Delaying for ' + IntToStr(2400 + (counter * 2300)) + ' milliseconds...');
		Delay(2400 + (counter * 2300));
		Engine.SetGameWindow(false);
		Delay(2000);
		Inc(counter);
		if (counter > 10) then exit;
	end;
	result := true;
end;

function GoTo_Spot: Boolean;
begin
	result := false;
	if (User.Level >= 77) then begin
		if not (GetZone = 10) then begin
			Print('Go to level 77 spot, Varka - Near Spawn');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToVarka;
		end;
	end else if (User.Level >= 72) 
	and (not (IsClass_FighterType(User.ClassId)) or IsClass_Nuker(User.ClassId) or IsClass_Bp(User.ClassId) or IsClass_Archer(User.ClassId) or IsClass_Trick(User.ClassId))
	and not IsClass_Wc(User.ClassId) then begin
		if not (GetZone = 12) then begin
			Print('Go to level 73 Mage/Archer spot, Pavel Ruins');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortPavel;
			Engine.MoveTo(88937, -125350, -3808);
			Engine.MoveTo(89676, -124451, -3912);
			Engine.MoveTo(90733, -124080, -4059);
			Engine.MoveTo(91861, -123685, -4216);
			Engine.MoveTo(92382, -123327, -4280);
			Engine.MoveTo(93111, -122646, -4544);
		end;
	end else if (User.Level >= 73) or ((User.level >= 71) and IsClass_Tyrant(User.ClassId)) then begin
		if not (GetZone = 2) then begin
			Print('Go to level 73 Fighter spot, Silent Valley (or lv. 71 for tyrant)');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortSilentValley;
			Engine.MoveTo(171039, 55884, -5344);
			Engine.MoveTo(171461, 56182, -5496);
			Engine.MoveTo(171964, 56514, -5664);
			Engine.MoveTo(172513, 56584, -5792);
			Engine.MoveTo(173479, 56245, -5931);
			Engine.MoveTo(175539, 55138, -6000);
			Engine.MoveTo(175987, 54962, -5992);
		end;
	end else if (User.Level >= 63) then begin
		if not (GetZone = 1) then begin
			Print('Go to level 63 spot, Garden of beasts');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToGoddard;
			Engine.MoveTo(147458, -56178, -2776);
			Engine.MoveTo(146839, -56125, -2776);
			Engine.MoveTo(146184, -56418, -2776);
			Engine.MoveTo(145461, -56907, -2976);
			Engine.MoveTo(144739, -57550, -2976);
			Engine.MoveTo(144146, -57973, -3022);
			Engine.MoveTo(143065, -58691, -3448);
			Engine.MoveTo(142892, -59198, -3392);
			Engine.MoveTo(142784, -59240, -3360);
			Engine.MoveTo(142592, -59151, -3264);
			Engine.MoveTo(142089, -59515, -3176);
		end;
		
	end else if (User.Level >= 55) then begin
		if not (GetZone = 11) then begin
			Print('Go to level 55 spot, Fields of Massacre');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToFieldsOfMassacre;
			Engine.MoveTo(183452, -15554, -2736);
			Engine.MoveTo(183411, -15935, -2712);
			Engine.MoveTo(183399, -16400, -2712);
			Engine.MoveTo(183435, -17096, -2800);
			Engine.MoveTo(183431, -17613, -2792);
			Engine.MoveTo(183604, -18351, -2760);
		end;
		
	end else if (User.Level >= 46) then begin
		if not (GetZone = 9) then begin
			Print('Go to level 46 spot, The Cemetary');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToCemetary;
			Engine.MoveTo(172152, 20092, -3328);
			Engine.MoveTo(171811, 19565, -3328);
			Engine.MoveTo(171341, 18941, -3328);
		end;
		
	end else if (User.Level >= 37) then begin
		if not (GetZone = 8) then begin
			Print('Go to level 37 spot, Ivory Tower - Crater');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToIvoryTower;
			Engine.MoveTo(85402, 16352, -3664);
			Engine.MoveTo(85342, 16568, -3608);
			Engine.MoveTo(85336, 17464, -3512);
			Engine.MoveTo(85321, 19827, -3784);
			Engine.MoveTo(85327, 22062, -3512);
			Engine.MoveTo(85328, 23375, -3520);
			Engine.MoveTo(85330, 24104, -3632);
			Engine.MoveTo(85004, 24046, -3616);
			Engine.MoveTo(84878, 23828, -3576);
			Engine.MoveTo(84492, 22773, -4848);
			Engine.MoveTo(84347, 22055, -5288);
			Engine.MoveTo(84274, 21259, -5280);
		end;
		
	end else if (User.Level >= 30) then begin
		if not (GetZone = 7) then begin
			Print('Go to level 30 spot, Cruma Marshlands - upper part');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToCruma;
			Engine.MoveTo(16778, 114173, -3440);
			Engine.MoveTo(16012, 114174, -3576);
			Engine.MoveTo(16143, 113937, -3576);
			Engine.MoveTo(16390, 113849, -3576);
			Engine.MoveTo(16585, 113432, -3576);
			Engine.MoveTo(17194, 112512, -3576);
			Engine.MoveTo(17797, 111827, -3576);
			Engine.MoveTo(18508, 110808, -3656);
			Engine.MoveTo(19037, 109818, -3688);
			Engine.MoveTo(19298, 109037, -3664);
		end;
		
	end else if (User.Level >= 23) then begin
		if not (GetZone = 6) then begin
			Print('Go to level 23 spot, Cruma Marshlands - lower part');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToCrumaMarsh;
			Engine.MoveTo(5564, 126367, -3672);
			Engine.MoveTo(6114, 125379, -3640);
			Engine.MoveTo(6964, 124635, -3664);
			Engine.MoveTo(7473, 124315, -3680);
		end;
		
	end else if (User.Level >= 16) then begin
		if not (GetZone = 5) then begin
			Print('Go to level 16 spot, Neutral Zone');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToNeutralZone;
			Engine.MoveTo(-10680, 76974, -3592);
			Engine.MoveTo(-10591, 77619, -3616);
			Engine.MoveTo(-10302, 78583, -3616);
			Engine.MoveTo(-10050, 79342, -3616);
		end;
		
	end else if (User.Level >= 6) then begin
		if not (GetZone = 4) then begin
			Print('Go to level 6 spot, Talking Island, north - golems');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToTalkingIsland;
			Engine.MoveTo(-84099, 243634, -3728);
			Engine.MoveTo(-84537, 243976, -3728);
			Engine.MoveTo(-84456, 244163, -3728);
			Engine.MoveTo(-84327, 244338, -3728);
			Engine.MoveTo(-84122, 244584, -3728);
			LeadDlg(30006, 3, 9);
			Delay(10000);
			Engine.MoveTo(-106435, 214664, -3424);
			Engine.MoveTo(-105775, 214688, -3408);
			Engine.MoveTo(-104694, 214835, -3424);
			Engine.MoveTo(-103797, 214921, -3424);
			Engine.MoveTo(-103081, 214738, -3288);
		end;
		
	end else if (User.Level >= 1) then begin
		if not (GetZone = 3) then begin
			Print('Go to level 1 spot, Talking Island, outside village');
			GetOutOfCombat;
			if DetectStuck then exit;
			PortToTalkingIsland;
			Engine.MoveTo(-83781, 243601, -3728);
			Engine.MoveTo(-83219, 244099, -3728);
			Engine.MoveTo(-82406, 244921, -3720);
		end;
		
		
	end;
	
	if not (Engine.GetFaceState(0)) then Engine.FaceControl(0, true);
	
	result := true;
end;

function SetZone(): Integer;
var
nZone: IntegeR;
begin
	nZone := GetZone;
	result := nZone;
	
	case nZone of
		1: cLoadZone('auto_gardenOfBeasts1.zmap'); 	//made
		2: cLoadZone('auto_silentValley_Mid.zmap'); 	//made
		3: cLoadZone('auto_talkingIsland_vilout.zmap'); //made
		4: cLoadZone('auto_talkingIsland_north_golems.zmap'); //done
		5: cLoadZone('auto_neutralZone.zmap'); //done
		6: cLoadZone('auto_crumaMarshLow.zmap'); //done
		7: cLoadZone('auto_crumaMarshHigh.zmap'); //done
		8: cLoadZone('auto_ivoryCrater.zmap'); //done
		9: cLoadZone('auto_cemetary.zmap'); 
		10: cLoadZone('auto_varka.zmap'); //done
		11: cLoadZone('auto_fieldsOfMassacre.zmap'); //made
		12: cLoadZone('auto_pavel.zmap');
		
		
	end;
	
end;

function GetZone: Integer;
var
z: Integer;
debugP: Boolean;
begin
	result := 0;
	debugP := false;
	z := User.Z;
	//Town of Goddard
	if (User.DistTo(147662, -56254, z) < 4500) then begin
		result := 100;
		if debugP then print('Zone 100 recognized - Town of Goddard');
		exit;
	
	//Garden of Beasts outside goddard
	end else if (User.DistTo(140465, -63188, z) < 7300)
	or (User.DistTo(137146, -52719, z) < 8000) then begin
		result := 1;
		if debugP then print('Zone 1 recognized');
		
	//Silent Valley
	end else if (User.DistTo(179258, 53995, z) < 9000) then begin
		result := 2;
		if debugP then print('Zone 2 recognized');
		
	//Talking Island, outside village
	end else if (User.DistTo(-79657, 246841, z) < 5000) then begin
		result := 3;
		if debugP then print('Zone 3 recognized');
		
	//Talking Island, north - golems
	end else if (User.DistTo(-101861, 216217, z) < 5200) then begin
		result := 4;
		if debugP then print('Zone 4 recognized');
		
	//Neutral Zone
	end else if (User.DistTo(-10050, 79342, z) < 16000) then begin
		result := 5;
		if debugP then print('Zone 5 recognized');
		
	//Cruma Marshlands Lower part
	end else if (User.DistTo(16031, 123728, z) < 10000) then begin
		result := 6;
		if debugP then print('Zone 6 recognized');
		
	//Cruma Marshlands Upper part
	end else if (User.DistTo(22023, 104945, z) < 8200) then begin
		result := 7;
		if debugP then print('Zone 7 recognized');
		
	//Ivory Crater
	end else if (User.DistTo(84093, 19896, z) < 11000)
		and (abs(z - (-5288)) < 300) then begin
		result := 8;
		if debugP then print('Zone 8 recognized');
		
	//Cemetary
	end else if (User.DistTo(172748, 17628, z) < 9000) then begin
		result := 9;
		if debugP then print('Zone 9 recognized');
		
	//Varka Spawn
	end else if (User.DistTo(125744, -40864, z) < 13000) then begin
		result := 10;
		if debugP then print('Zone 10 recognized');
		
	//Fields of Massacre
	end else if (User.DistTo(180852, -21055, z) < 15000) then begin
		result := 11;
		if debugP then print('Zone 11 recognized');
		
	//Pavel Ruins
	end else if (User.DistTo(94220, -121241, z) < 3500) then begin
		result := 12;
		if debugP then print('Zone 12 recognized');
	
		
	end;
	
	
end;


function CheckDispellBuffs(idList: array of integer): Boolean;
var
i, len: Integer;
oBuff: Tl2Buff;
begin
	result := false;
	
	len := Length(idList);
	for i := 0 to len - 1 do begin
		if (User.Buffs.ById(idList[i], oBuff)) then begin
			Engine.Dispel(oBuff.Name);
			result := true;
			exit;
		end;
	end;
end;

function CheckUse_HeroSelfBuffs: Boolean;
begin
	result := false;
	if not User.Hero then exit;
	
	if (CheckUse_HeroicUD) then begin
		result := true;
		exit;
	end;
end;

function CheckUse_HeroicUD: Boolean;
begin
	result := false;
	if HasSkill_Ready(395) //395 = Heroic Miracle
	and not GetMemberHasUdBuff(User)
	and HasItem_MinCount(Engine, 1785, 40) then begin	//Have 40+ soul ore?
		if (User.Cp < 50) 
		and (User.Hp < 60) 
		and (GetCount_HasCharAsTarget_PvpOrPve(User) > 2) then begin
			Print('Use Heroic Miracle! [Buff: UD]');
			
			//Dispell Hero Zerk incase
			CheckDispellBuffs([396]);
			result := CUseSkill(395, false, false, Engine.GetFaceState(0));
		end;
	end;
end;

function CheckUse_HeroicValor_LeaderOnly: Boolean;
var
i: Integer;
begin
	result := false;
	
	if not (User.Name = GetName_Leader) then exit;
	
	if PvpLoaded 
	and HasIntervalPassed_BySkillId(1374, 4000)
	and (GetCount_PartyMembersHasBuff(1374) < 3) then begin	//	1374 = Heroic Valor
		print('Find member to use Heroic Valor');	
		if Use_HeroicValor_OnFirstAvailableHero then begin
			print('Use Heroic Valor');
			SetInterval_OnSkillId(1374, 4000);
			result := true;
		end;
	end;
	
end;

function Use_HeroicValor_OnFirstAvailableHero(): Boolean;
var
i: Integer;
targetControl: Tl2Control;
oSkill : Tl2Skill;
begin
	result := false;
	i := 0;
	targetControl := GetControlByIndex(i);
	while Assigned(targetControl) do begin
		if (targetControl.GetUser.Hero) 
		and (not IsTarget_GoodState_Party(targetControl.GetUser, 700))
		and (targetControl.GetSkillList.ById(1374, oSkill))
		and not (oSkill = nil)
		and (oSkill.Valid) 
		and (oSkill.EndTime <= 0) 
		and HasItem_MinCount(targetControl, 3031, 80) then begin  //Has 80 spirit Ore?
			result := targetControl.DUseSkill(1374, false, false);
			result := targetControl.DUseSkill(1374, false, false);
			result := targetControl.DUseSkill(1374, false, false);
			exit;
		end;	
		i := i + 1;
		targetControl := GetControlByIndex(i);
	end;
end;

function GetCount_PartyMembersHasBuff(nBuffId: Integer): Integer;
var
i, counter: Integer;
oTarget: Tl2Char;
oBuff: Tl2Buff;
begin
	result := -1;
	if (User.Buffs.ById(nBuffId, oBuff)) then
		counter := 1
	else
		counter := 0;
		
	for i := 0 to Party.Chars.Count - 1 do begin
		oTarget := Party.Chars.Items(i);
		if (oTarget = nil) or (oTarget.Name = '') or not (oTarget.Valid) then continue;
		if (oTarget.Buffs.ById(nBuffId, oBuff)) then Inc(counter);
	end;
	result := counter;
end;


end.