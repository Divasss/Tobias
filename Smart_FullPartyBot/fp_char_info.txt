unit fp_char_info;
interface

function HasSkill(skillID: Integer): Boolean;
function HasSkill_Ready(skillID: Integer): Boolean; Overload;
function HasSkill_Ready(skillID: Integer; control: Tl2Control): Boolean; Overload;
function HasSkills_Ready_Any(skillID: Integer; id2: Integer = -1; id3: Integer = -1; id4: Integer = -1; id5: Integer = -1; id6: Integer = -1; id7: Integer = -1): Boolean;

function IsClass_Nuker(classID: Integer): Boolean;
function IsClass_Sorc(classID: Integer): Boolean;
function IsClass_Necro(classID: Integer): Boolean;
function IsClass_Sps(classID: Integer): Boolean;
function IsClass_Sph(classID: Integer): Boolean;
function IsClass_Slh(classID: Integer): Boolean;
function IsClass_Trick(classID: Integer): Boolean;
function IsClass_Judi(classID: Integer): Boolean;
function IsClass_Wl(classID: Integer): Boolean;
function IsClass_Destro(classID: Integer): Boolean;
function IsClass_Tyrant(classID: Integer): Boolean;
function IsClass_Ol(classID: Integer): Boolean;
function IsClass_Wc(classID: Integer): Boolean;
function IsClass_Bp(classID: Integer): Boolean;
function IsClass_Ee(classID: Integer): Boolean;

function IsClass_DD(classID: Integer): Boolean;

function IsClass_Tank(classID: Integer): Boolean;
function IsClass_Dagger(classID: Integer): Boolean;
function IsClass_Gh(classID: Integer): Boolean;
function IsClass_Hk(classID: Integer): Boolean;
function IsClass_Pala(classID: Integer): Boolean;
function IsClass_Sk(classID: Integer): Boolean;
function IsClass_Db(classID: Integer): Boolean;

function IsClass_ZealotType(classID: Integer): Boolean;


function IsClass_FighterType(classID: Integer): Boolean;
function IsClass_MeleeDpsType(classID: Integer): Boolean;
function IsClass_MysticType(classID: Integer): Boolean;
function IsClass_RangedDDType(classID: Integer): Boolean;
function IsClass_Archer(classID: Integer): Boolean;
function IsClass_OrcMystic(classID: Integer): Boolean;
function IsClass_SwsBd(classID: Integer): Boolean;
function IsClass_Bd(classID: Integer): Boolean;
function IsClass_Sws(classID: Integer): Boolean;
function IsClass_Summoner(classID: Integer): Boolean;
function IsClass_Spoiler(classID: Integer): Boolean;

function GetShotId: Integer;
function GetSpiritShotId: Integer;
function GetShotPrice: Integer;
function GetSpiritShotPrice: Integer;

function HasItem_MinCount(control: Tl2Control; itemId, minCount: Integer): Boolean;
function IHaveBuff(buffId: Integer): Boolean;
function GetMemberHasUdBuff(oMember: Tl2Char): Boolean;

function GetClassValue_Healer(classID: Integer): Integer;
function GetClassValue_PartyImportance(classID: Integer): Integer;

implementation
uses
SysUtils, Classes, global_vars, fp_target_inc, fp_inc;


function HasSkill(skillID: Integer): Boolean;
var
skill: Tl2Skill;
begin
	result := SkillList.ById(skillID, skill);
end;
function HasSkill_Ready(skillID: Integer): Boolean; Overload;
var
skill: Tl2Skill;
begin
	result := false;
	if (SkillList.ById(skillID, skill))
	and not skill.Disabled 
	and not skill.Passive then begin
		if IsSkillready(skillID) then result := true;
	end;
end;

function HasSkill_Ready(skillID: Integer; control: Tl2Control): Boolean; Overload;
var
skill: Tl2Skill;
begin
	result := false;
	if Assigned(control) then begin
		if (control.GetSkillList.ById(skillID, skill))
		and not skill.Disabled 
		and not skill.Passive then begin
			if IsSkillready(skillID, control) then result := true;
		end;
	end;
end;


function HasSkills_Ready_Any(	skillID: Integer;
								id2: Integer = -1;
								id3: Integer = -1;
								id4: Integer = -1;
								id5: Integer = -1;
								id6: Integer = -1;
								id7: Integer = -1): Boolean;
var
skill: Tl2Skill;
begin
	result := false;
	
	if (SkillList.ByID(skillID, skill))
	and (IsSkillReady(skill.id))then 
		result := true
		
	else if (id2 > 0)
	and (SkillList.ByID(id2, skill))
	and (IsSkillReady(skill.id))then 
		result := true
		
	else if (id3 > 0)
	and (SkillList.ByID(id3, skill))
	and (IsSkillReady(skill.id))then 
		result := true
		
	else if (id4 > 0)
	and (SkillList.ByID(id4, skill))
	and (IsSkillReady(skill.id))then 
		result := true
		
	else if (id5 > 0)
	and (SkillList.ByID(id5, skill))
	and (IsSkillReady(skill.id))then 
		result := true
		
	else if (id6 > 0)
	and (SkillList.ByID(id6, skill))
	and (IsSkillReady(skill.id))then 
		result := true
		
	else if (id7 > 0)
	and (SkillList.ByID(id7, skill))
	and (IsSkillReady(skill.id))then 
		result := true;
	
end;


function IsClass_DD(classID: Integer): Boolean;
begin
	result := false;
	
	if IsClass_Dagger(classID)
	or IsClass_Archer(classID)
	or IsClass_Db(classID) 
	or IsClass_Destro(classID) 
	or IsClass_Nuker(classID) 
	or IsClass_Tyrant(classID) 
	or IsClass_Trick(classID) 
	or IsClass_Glad(classID) 
	or IsClass_Wl(classID)
	or IsClass_Slh(classID) 
	or IsClass_MeleeDpsType(classId) then begin
		result := true;
		exit;	
	end;
	
	case classID of
		152 .. 170, 176 .. 178: result := true;
		//Add Ertheias!!!
	end;
end;


function IsClass_Nuker(classID: Integer): Boolean;
begin
	result := 	IsClass_Necro(classID)
				or IsClass_Sps(classID)
				or IsClass_Sorc(classID)
				or IsClass_Sph(classID);
end;

function IsClass_Sorc(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		10 .. 12, 94: result := true;
	end;	
end;
function IsClass_Necro(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		13, 95: result := true;
	end;	
end;
function IsClass_Sps(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		25 .. 27, 103: result := true;
	end;	
end;
function IsClass_Sph(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		38 .. 40, 110: result := true;
	end;	
end;

function IsClass_Wl(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		0, 1, 3, 89: result := true;
	end;	
end;
function IsClass_Destro(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		44, 45, 46, 113: result := true;
	end;	
end;
function IsClass_Tyrant(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		44, 47, 48, 114: result := true;
	end;	
end;

function IsClass_Glad(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		0, 1, 2, 88: result := true;
	end;	
end;

function IsClass_Ol(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		49 .. 51, 115: result := true;
	end;	
end;
function IsClass_Wc(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		52, 116: result := true;
	end;	
end;
function IsClass_Bp(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		15, 16, 97: result := true;
	end;	
end;

function IsClass_Ee(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		29, 30, 105: result := true;
	end;	
end;
function IsClass_Se(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		42, 43, 112: result := true;
	end;	
end;
function IsClass_Slh(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		125, 126, 128, 129, 132, 133: result := true;
	end;	
end;
function IsClass_Trick(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		124, 126, 130, 134: result := true;
	end;	
end;
function IsClass_Judi(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		135, 136: result := true;
	end;	
end;


function IsClass_FighterType(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		0 .. 9, 88 .. 93, 18 .. 24, 99 .. 102, 31 .. 37, 106 .. 109, 
		44 .. 48, 113, 114, 53 .. 57, 117, 118, 123 .. 127, 130, 131, 134: result := true;
	end;	
end;


function IsClass_MeleeDpsType(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		0 .. 3, 7, 8, 88, 89, 93, 18, 22, 23, 101, 31, 35, 36, 108, 44 .. 48, 113, 114, 123 .. 127, 131: result := true;
	end;	
end;



function IsClass_MysticType(classID: Integer): Boolean;
begin
	result := not IsClass_FighterType(classID);
end;
function IsClass_RangedDDType(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		9 .. 13, 92, 94, 95, 24 .. 27, 102, 103, 37 .. 41, 109 .. 111, 
		128 .. 130, 132 .. 134: result := true;
	end;	
end;
function IsClass_Archer(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		9, 92, 24, 102, 37, 109: result := true;
	end;	
end;
function IsClass_OrcMystic(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		49 .. 52, 115, 116: result := true;
	end;	
end;
function IsClass_SwsBd(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		18, 19, 21, 100, 31, 32, 34, 107: result := true;
	end;	
end;
function IsClass_Sws(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		18, 19, 21, 100: result := true;
	end;	
end;
function IsClass_Bd(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		31, 32, 34, 107: result := true;
	end;	
end;

function IsClass_Summoner(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		14, 96, 28, 104, 41, 111: result := true;
	end;	
end;

function IsClass_Spoiler(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		117: result := true;
	end;	
end;

function GetWeaponGrade: string;
var
I: Integer;
oItem: Tl2Item;
begin
  result := '0';
  for i := 0 to Inventory.User.Count - 1 do begin
    oItem := Inventory.User.Items(i);
	if (oItem.ItemType = 0) and (oItem.Equipped) then begin
	  result := oItem.GradeName;
	  Exit;
	end;
  end;
end;

function HasItem_MinCount(control: Tl2Control; itemId, minCount: Integer): Boolean;
var
I: Integer;
oItem: Tl2Item;
begin
	result := false;
	if not Assigned(control) then exit;
	for i := 0 to control.GetInventory.User.Count - 1 do begin
		oItem := control.GetInventory.User.Items(i);
		if (oItem = nil) then Continue;
		if (oItem.Id = itemId) and (oItem.Count >= minCount) then begin
			result := true;
			Exit;
		end;
	end;
end;

function IHaveBuff(buffId: Integer): Boolean;
var
oBuff: Tl2Buff;
begin
	result := User.Buffs.ById(buffId, oBuff);
end;

function GetMemberHasUdBuff(oMember: Tl2Char): Boolean;
var
oBuff: Tl2Buff;
begin	
	result := false;
	if (oMember = nil) then exit;
	if (oMember.Oid = user.Oid) or (oMember.IsMember) then begin
		if oMember.Buffs.ByID(395, oBuff)	//Heroic Miracle
		or oMember.Buffs.ById(368, oBuff)	//Vengeance
		or oMember.Buffs.ById(110, oBuff)	//Ultimate Defense
		or oMember.Buffs.ById(5576, oBuff)	//Subclass Skill: Celestial trigger
		or oMember.Buffs.ById(528, oBuff) then begin //Shield of Faith
			result := true;
		end;
	end;
end;

function GetShotId: Integer;
begin
	result := 0;
  case GetWeaponGrade of
  '0': result := 0;
  'NG': result := 1835;
  'D': result := 1463;
  'C': result := 1464;
  'B': result := 1465;
  'A': result := 1466;
  'S', 'S80', 'S84': result := 1467;  
  end;
end;

function GetSpiritShotId: Integer;
begin
	result := 0;
  case GetWeaponGrade of
  '0': result := 0;
  'NG': result := 3947;
  'D': result := 3948;
  'C': result := 3949;
  'B': result := 3950;
  'A': result := 3951;
  'S', 'S80', 'S84': result := 3952;  
  end;
end;

function GetShotPrice: Integer;
begin
	result := 0;
	case GetWeaponGrade of
	  '0': result := 0;
	  'NG': result := 50;
	  'D': result := 100;
	  'C': result := 200;
	  'B': result := 500;
	  'A': result := 800;
	  'S', 'S80', 'S84': result := 1000;  
	end;
end;
function GetSpiritShotPrice: Integer;
begin
	result := 0;
  case GetWeaponGrade of
  '0': result := 0;
  'NG': result := 80;
  'D': result := 100;
  'C': result := 600;
  'B': result := 700;
  'A': result := 800;
  'S', 'S80', 'S84': result := 1000;  
  end;
end;


function IsClass_Tank(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		4, 5, 6, 90, 91, 19, 20, 99, 32, 33, 106: result := true;
	end;	
	//Human, Elf, DarkElf Tank Classes level 20-85
end;


function IsClass_Dagger(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		8, 93, 23, 101, 36, 108, 55, 117: result := true;
	end;
end;


function IsClass_Gh(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		36, 108: result := true;
	end;
end;

function IsClass_Hk(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		6, 91: result := true;
	end;	
end;
function IsClass_Pala(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		5, 90: result := true;
	end;	
end;
function IsClass_Sk(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		33, 106: result := true;
	end;	
end;
function IsClass_Db(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		125, 127, 131: result := true;
	end;	
end;


function IsClass_ZealotType(classID: Integer): Boolean;
begin
	result := false;
	case classID of
		46, 48, 113, 114: result := true;
	end;	
end;

function GetClassValue_Healer(classID: Integer): Integer;
begin
	result := 0;
	if IsClass_Bp(classID) then result := 4
	else if IsClass_Ee(classID) then result := 3
	else if IsClass_Se(classID) then result := 2;
end;



function GetClassValue_PartyImportance(classID: Integer): Integer;
var
i, nImportance: Integer;
begin
	result := 0;  
	
	nImportance := 4;	//Standard value
  
	if IsClass_Tank(classID) then nImportance := 0;
	if IsClass_Summoner(classID) then nImportance := 1;
	if IsClass_Bd(classID) then nImportance := 2;
	if IsClass_Sws(classID) then nImportance := 3;
	if IsClass_Sorc(classID) then nImportance := 5;
	if IsClass_Sps(classID) then nImportance := 6;
	if IsClass_Ol(classID) then nImportance := 9;
	if (GetClassValue_Healer(classID) > 0) then nImportance := 10 + GetClassValue_Healer(classID); //+1 to negate eventual overlord bonus
	result := nImportance;
end;


end.