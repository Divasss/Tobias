unit fp_skills;

interface

uses
SysUtils, Classes;



//pre declarations


function GetTargetByOid(nOid: Integer; IsCharTarget: Boolean; MaxRange: Cardinal): Tl2Live;
function GetMillisecondsBetweenTimes(time1, time2: TDateTime): Cardinal;
type TTarget = class;
type TSkill = class;
type TTargetEvaluation = class;

	TEvaluateTargetFunction = function(oTarget: Tl2Live): array of Integer;
	TValidateTargetFunction = function(oTarget: Tl2Live): Boolean;


	
type
	TSkill = Class(TObject)

		private
			nSkillId		: Cardinal;
			timeLastUsed	: TDateTime;
		public
		
			Target			: TTarget;
			Correct		: Boolean;
			Cooldown	: Cardinal;
			RequiresTarget : Boolean;
			IsAoeSkill	: Boolean;
			IsGroundSkill : Boolean;
			IsRangedAoeSkil : Boolean;
			constructor Create(Id: Cardinal; cMaxRange: Cardinal; CastAtObject: Boolean; IsPvpSkill: Boolean);
			function TryUse(Pvp: Boolean): Boolean;
			function Use: Boolean;
			function IsReady: Boolean;
			function HasCooldownPassed: Boolean;
			
		published
			
			property SkillId 	: Cardinal
				read nSkillId;
	
	end;
	
	TSupportSkill = Class(TSkill)
	
		private
			Target		: Boolean;
	
	
	end;
	
	TTarget = Class(TObject)
		private
			IsLocation	: Boolean;
			IsObject	: Boolean;
			TargetOid	: Cardinal;
			
		public 
			Correct		: Boolean;
			Valid		: Boolean;
			Evaluation	: TTargetEvaluation;
			EvaluationFunction : TEvaluateTargetFunction;
			ValidationFunction : TValidateTargetFunction;
			IsPvpTarget	: Boolean;
			MaxRange: Cardinal;
			SkillRadius: Cardinal;
			Skill		: TSkill;
			
			X : Integer;
			Y : Integer;
			Z : Integer;
			
			constructor Create(cMaxRange: Cardinal; IsObject, IsForPvp : Boolean; ParentSkill: TSkill);
			function GetTarget: Boolean;
			function SetTarget: Boolean;
			
	end;
	
	TTargetEvaluation = Class(TObject)
		public 
			Correct: Boolean;
			EvaluationList: TList;
			Constructor Create(Args : array of integer);
			function Compare(oponent: TTargetEvaluation): Integer;
	end;
	
	


  
	
implementation



constructor TSkill.Create(Id: Cardinal; cMaxRange: Cardinal; CastAtObject: Boolean; IsPvpSkill: Boolean);
var
	oSkill: Tl2Skill;
begin
	Print('TSkill.Create: Initiated');
	Inherited Create();
	
	Print('Creating Skill');
	self.Correct := false;
	if SkillList.ById(Id, oSkill) then begin
		nSkillId := Id;
	end else begin
		nSkillId := 0;
		Print('TSkill Error: Skill with id = ' + IntToStr(Id) + ' could not be found');
		exit;
	end;
	Print('TSkill.Create: 1');
	self.timeLastUsed := now;
	Print('TSkill.Create: 2');
	self.Cooldown := 0;
	Print('TSkill.Create: 3');
	self.RequiresTarget := true;
	Print('TSkill.Create: 4');
	self.IsAoeSkill := false;
	self.IsGroundSkill := false;
	self.IsRangedAoeSkil := false;
	Print('TSkill.Create: 5');
	self.Target := TTarget.Create(cMaxRange, CastAtObject, IsPvpSkill, self);
	
	Print('TSkill.Create: 6');
	if not (self.Target.Correct) then begin
		Print('TSkill.Create: ERROR - Target conditions are not set correctly.');	
		exit;
	end;
	
	Print('TSkill.Create: 7');
	self.Correct := true;
	
	Print('Finished Creating Skill');
end;

constructor TTarget.Create(cMaxRange: Cardinal; IsObject, IsForPvp : Boolean; ParentSkill: TSkill);
begin
	Inherited Create;
	self.Correct := false;
	
	self.IsPvpTarget := IsForPvp;
	self.ValidationFunction := nil;
	self.EvaluationFunction := nil;
	
	//Dont check if skill is .correct, since it has not been set yet.
	self.Skill := ParentSkill;
	
	if (cMaxRange < 0) then begin
		Print('TTarget.Create Fail! Max Range cannot be below 0');
		exit;	
	end;
	
	self.MaxRange := cMaxRange;
	
	if (IsObject) then begin
		self.IsObject := true;
		self.IsLocation := false;
	end else begin
		self.IsObject := false;
		self.IsLocation := true;
	end;
	
	self.Correct := true;
end;

Constructor TTargetEvaluation.Create(Args : array of integer);
var
i: Integer;
begin
	Inherited Create;
	self.Correct := false;
	if (Length(Args) < 1) then begin
		Print('TTargetEvaluation.Create: ERROR - Argument list is below 1, Exit!');
		exit;
	end;
	self.EvaluationList := TList.Create();
	
	for i := 0 to Length(Args) - 1 do begin
		self.EvaluationList.Add(Pointer(Args[i]));
	end;
	
	self.Correct := true;
end;



function TSkill.HasCooldownPassed: Boolean;
var
tempMilli: Integer;
begin
	tempMilli := GetMillisecondsBetweenTimes(self.timeLastUsed, now);
	if (tempMilli > self.Cooldown) then begin
		result := true;
	end else begin
		result := false;
	end;

end;

function TSkill.IsReady: Boolean;
var
oSkill: Tl2Skill;
begin
	result := false;
	
	if SkillList.ById(self.SkillId, oSkill) then begin
		
		// Above 1 hour? mistake or very long?
		if (oSkill.EndTime > 3600000) then begin
			Print('TSkill.IsReady: Warning - Skill cooldown was above 1 hour, so pass as mistake.');
		end else if (oSkill.EndTime > 0) then begin
			exit;
		end;
		
		if (oSkill.Valid) then begin
			result := true;
		end;
	end;
end;

function TSkill.TryUse(Pvp: Boolean): Boolean;
begin
	result := false;
	
	if not (self.Correct) then begin
		Print('TSkill.TryUse: ERROR - Cannot use, because we are not setup correctly.');
		exit;
	end;
	
	if not self.IsReady then exit;
	
	
	if not (self.Target.IsPvpTarget = Pvp) then begin
		self.Target.Valid := false;
		self.Target.IsPvpTarget := Pvp;
	end;
	
	if not self.Target.GetTarget then begin
		Print('TSkill.TryUse for id = ' + IntToStr(self.SkillId) + ' : No target found...');
		exit;
	end;
	
	if (self.Target.Valid) then begin
		if (self.Target.IsObject) then begin
			if not (User.Target.Oid = self.Target.TargetOid) then begin
				if not (self.Target.SetTarget()) then begin
					Print('TSkill.TryUse: ERROR - Could not set target.');
					exit;
				end;
			end;
			//use shift always?
			if Engine.UseSkill(self.SkillId) then begin
				result := true;
				self.timeLastUsed := now;
				exit;
			end;	
		end else if (self.Target.IsLocation) then begin
			
			//Get in range.
			if not (self.IsRangedAoeSkil) 
			and (User.DistTo(self.Target.X, self.target.Y, self.target.Z) > 50) then begin
				Engine.DMoveTo(self.Target.X, self.Target.Y, self.Target.Z);
				result := true;
				exit;
			end;
			
			if self.IsGroundSkill then begin
				if Engine.UseSkillGround(self.SkillId, self.Target.X, self.Target.Y, self.Target.Z) then begin
					result := true;
					self.timeLastUsed := now;
					exit;
				end;
			end;
			if (self.RequiresTarget) then begin
			
				if not (self.Target.SetTarget()) then begin
					Print('TSkill.TryUse: ERROR - Could not set target, for aoe.');
					exit;
				end;
			end;
			
			if Engine.UseSkill(self.SkillId) then begin
				result := true;
				self.timeLastUsed := now;
				exit;
			end;	
		end;
	end;
end;
function TSkill.Use: Boolean;
begin
	result := false;
	
	if not (self.Correct) then begin
		Print('TSkill.Use: ERROR - Cannot use, because we are not setup correctly.');
		exit;
	end;
	
	if not self.IsReady then exit;
	
	if not self.Target.Valid then begin
		if not self.Target.GetTarget then begin
			Print('TSkill.Use for id = ' + IntToStr(self.SkillId) + ' : No target found...');
			exit;
		end;
	end;
	
	if (self.Target.Valid) then begin
		if not (User.Target.Oid = self.Target.TargetOid) then begin
			if not (self.Target.SetTarget()) then begin
				Print('TSkill.Use: ERROR - Could not set target.');
				exit;
			end;
		end;
		result := Engine.UseSkill(self.SkillId);
	end;
end;

function TTargetEvaluation.Compare(oponent: TTargetEvaluation): Integer;
var
i, selfArg, arg2: Integer;

begin
	result := -2;
	
	if (oponent.EvaluationList.Count <= 0) or (self.EvaluationList.Count <= 0) then begin
		Print('TTargetEvaluation.Compare ERROR: some list had count = 0');
		exit;
	end;
	
	if (self.EvaluationList = nil) 
	and not (oponent = nil) then begin
		result := 2;
		exit;
	end;
	if (oponent = nil) 
	and not (self.EvaluationList = nil) then begin
		result := 1;
		exit;
	end;
	
	if not (self.EvaluationList.Count = oponent.EvaluationList.Count) then begin
		raise Exception.Create('TTargetEvaluation: Error - invalid comparison');
	end;
	
	for i := 0 to self.EvaluationList.Count - 1 do begin
		try
			selfArg := Integer(self.EvaluationList[i]);
			arg2 := Integer(oponent.EvaluationList[i]);
		except
			on E : Exception do 
				Print('TTargetEvaluation.Compare Error, some list out of bounds');
		end;
		
		if (selfArg > arg2) then begin
			result := 1;
			exit;
		end else if (selfArg < arg2) then begin
			result := -1;
			exit;
		end;
	end;
	
	//All arguments were equal
	result := 0;
end;



function TTarget.GetTarget(): Boolean;
var	
oTarget, oCenterTarget: Tl2Live;
Eval: TTargetEvaluation;
EvaluationArgs: Array of Integer;
tX, tY, tZ, tempX, tempY, tempZ, count, i, comp, ClusterCount: Integer;
begin
	result := false;
	self.Valid := false;	
	
	if not (self.Correct) then begin
		Print('TTarget Error: Cannot Get Target when the settings are not correct.');
		exit;
	end;
	
	if not (self.Evaluation = nil) then begin
		self.Evaluation.Free;
	end;
	
	
	if (self.ValidationFunction = nil) then begin
		Print('ERROR: Validation Function doesnt exist.');
	end;
	
	if (self.IsObject) then begin
	
		if not (self.Skill.IsAoeSkill) then begin
			if (self.EvaluationFunction = nil) then begin
				Print('ERROR: Evaluation Function is nil');
				exit;
			end;
			if (self.IsPvpTarget) then count := Charlist.Count
			else count := NpcList.Count;
			
			for i := 0 to count - 1 do begin
				if self.IsPvpTarget then oTarget := CharList.Items(i)
				else oTarget := NpcList.Items(i);
				
				if (oTarget = nil) then continue;
				if (User.DistTo(oTarget) > self.MaxRange) then break;
				
				if not (self.ValidationFunction(oTarget)) then continue;
				
				Eval := TTargetEvaluation.Create(self.EvaluationFunction(oTarget));
				
				//Compare with earlier evaluation
				comp := Eval.compare(self.Evaluation);
				
				if (comp <= -2) then begin
					Print('TTarget.GetTarget: ERROR - Comparison was invalid !!');
				end;
				
				if (comp >= 0) then begin
					self.Evaluation.Free;
					self.Evaluation := Eval;
					self.TargetOid := oTarget.Oid;
					self.Valid := true;
					result := true;
				end;
				
				if (self.IsPvpTarget) then count := Charlist.Count
				else count := NpcList.Count;
			end;
			
		end else begin
			//self.Skill.IsAoeSkill = true
			oTarget := GetTarget_MostClustered(self.MaxRange, self.SkillRadius, self.IsPvpTarget, self.ValidationFunction, ClusterCount);
			if (ClusterCount < 2) then begin
				Print('TTarget.GetTarget: Warning - Not enough mobs for use of aoe skill on a target, with id = ' + IntToStr(self.Skill.SkillId));
				exit;
			end;
			
			self.Valid := true;
			self.TargetOid := oTarget.Oid;
			result := true;
			exit;
		end;
		
	
	end else if (self.IsLocation) then begin
	
		ClusterCount := 0;
		tempX := 0;
		tempY := 0;
		tempZ := 0;
		//Find a position for casting instead.
			
		oCenterTarget := GetTarget_MostClustered(self.MaxRange, self.SkillRadius, self.IsPvpTarget, self.ValidationFunction);
		if (self.IsPvpTarget) then count := Charlist.Count
		else count := NpcList.Count;
			
		for i := 0 to count - 1 do begin
			if self.IsPvpTarget then oTarget := CharList.Items(i)
			else oTarget := NpcList.Items(i);
				
			if (oTarget = nil) then continue;
			if (User.DistTo(oTarget) > self.MaxRange + self.SkillRadius) then break;
				
			if not (self.ValidationFunction(oTarget)) then continue;
				
			if (oCenterTarget.DistTo(oTarget) < self.SkillRadius) then begin
				Inc(ClusterCount);
				tempX := tempX + oTarget.X;
				tempY := tempY + oTarget.Y;
				tempZ := tempZ + oTarget.Z;
			end;
				
			if (self.IsPvpTarget) then count := Charlist.Count
			else count := NpcList.Count;
		end;
		
		if (ClusterCount = 0) then begin
			Print('TTarget.GetTarget: WARNING - No Aoe target');
			exit;
		end else if (ClusterCount = 1) then begin
			self.X := tempX;
			self.Y := tempY;
			self.Z := tempZ;
			self.Valid := true;
			self.TargetOid := oCenterTarget.Oid;
			result := true;
		end else if (ClusterCount >= 2) then begin
			self.X := (tempX div ClusterCount);
			self.Y := (tempY div ClusterCount);
			self.Z := (tempZ div ClusterCount);
			self.Valid := true;
			self.TargetOid := oCenterTarget.Oid;
			result := true;
			exit;
		end;
	end;
end;

function TTarget.SetTarget(): Boolean;
var
oTarget: Tl2Live;
begin
	result := false;
	
	if not self.Correct then begin
		Print('TTarget.SetTarget ERROR: Cannot set target, because it was not set correctly.');
		exit;
	end;
	
	if not self.Valid then begin
		Print('TTarget.SetTarget ERROR: Cannot set target, because it is not valid.');
		exit;
	end else if (self.TargetOid = 0) then begin
		Print('TTarget.SetTarget ERROR: Cannot set target, because OID was 0.');
		if (self.Valid) then self.Valid := false;
		exit;
	end;
	oTarget := GetTargetByOid(self.TargetOid, self.IsPvpTarget, self.MaxRange);
	if not (oTarget = nil)
	and (self.ValidationFunction(oTarget)) then begin
		result := Engine.SetTarget(oTarget);
	end else begin
		self.Valid := false;
	end;
	
end;
	
	
//////////////////////////////////////////////////////
	
//	
	
//					Sub Methods

//

/////////////////////////////////////////////////////


function GetTargetByOid(nOid: Integer; IsCharTarget: Boolean; MaxRange: Cardinal): Tl2Live;
var
i : Integer;
oTarget: Tl2Live;

begin
	result := nil;
	
	if IsCharTarget then begin
		//Pvp targets / char targets
		for i := 0 to CharList.Count - 1 do begin
			oTarget := Charlist.Items(i);
			if (oTarget = nil) then continue;
			if (User.DistTo(oTarget) > MaxRange) then break;
			if (oTarget.Oid = nOid) then begin
				result := oTarget;
				exit;
			end;		
		end;
	
	end else begin
		//PvE Targets - Npc Targets
		for i := 0 to NpcList.Count - 1 do begin
			oTarget := NpcList.Items(i);
			if (oTarget = nil) then continue;
			if (User.DistTo(oTarget) > MaxRange) then break;
			if (oTarget.Oid = nOid) then begin
				result := oTarget;
				exit;
			end;
		end;
	
	end;
	

end;
function GetTarget_MostClustered(MaxRange, MaxRadius: Cardinal; IsCharTarget: Boolean; ValidateFunc: TValidateTargetFunction): Tl2Live; overload;
var
temp: Integer;
begin
	temp := 0;
	result := GetTarget_MostClustered(MaxRange, MaxRadius, IsCharTarget, ValidateFunc, temp);
end;	


function GetTarget_MostClustered(MaxRange, MaxRadius: Cardinal; IsCharTarget: Boolean; ValidateFunc: TValidateTargetFunction; out clusterCount: Integer): Tl2Live; overload;
var
i, count, lastClusterCount, curClusterCount, curCloseClusterCount, lastCloseClusterCount : Integer;
oTarget, oLastTarget: Tl2Live;
closeRadius: Cardinal;
lastCloseRadius_Set: Boolean;
begin
	result := nil;
	lastClusterCount := 0;
	lastCloseRadius_Set := false;
	oLastTarget := nil;
	
	if (IsCharTarget) then count := Charlist.Count
	else count := NpcList.Count;
		
	for i := 0 to count - 1 do begin
		if IsCharTarget then oTarget := CharList.Items(i)
		else oTarget := NpcList.Items(i);
			
		if (oTarget = nil) then continue;
		if (User.DistTo(oTarget) > MaxRange) then break;
			
		if not (ValidateFunc(oTarget)) then continue;
			
		curClusterCount := GetCount_EnemiesNearTarget(oTarget, MaxRange, MaxRadius, IsCharTarget, ValidateFunc);
		
		if (curClusterCount > lastClusterCount) then begin
			oLastTarget := oTarget;
			lastClusterCount := curClusterCount;
			lastCloseRadius_Set := false;
		end else if (curClusterCount = lastClusterCount) then begin
		
			if (MaxRadius > 2) then begin
				closeRadius := MaxRadius div 2;
			end else closeRadius := MaxRadius;
			
			curCloseClusterCount := GetCount_EnemiesNearTarget(oTarget, MaxRange, closeRadius, IsCharTarget, ValidateFunc);
			
			if not lastCloseRadius_Set then begin
				lastCloseClusterCount := GetCount_EnemiesNearTarget(oLastTarget, MaxRange, closeRadius, IsCharTarget, ValidateFunc);
				lastCloseRadius_Set := true;
			end;
			
			if (curCloseClusterCount > lastCloseClusterCount) then begin
				oLastTarget := oTarget;
				lastClusterCount := curClusterCount;
				lastCloseClusterCount := curCloseClusterCount;
			end;
		end;
			
		if (IsCharTarget) then count := Charlist.Count
		else count := NpcList.Count;
	end;
	
	clusterCount := lastClusterCount;
	result := oLastTarget;
end;

	//GetTarget_MostClustered_Char
	//GetCount_EnemiesNearTarget_Char
function GetCount_EnemiesNearTarget(oCenterTarget: Tl2Live; MaxRange, MaxRadius: Cardinal; IsCharTarget: Boolean; ValidationFunc: TValidateTargetFunction): Integer;
var
i, count, mainDist, counter: Integer;
oTarget: Tl2Live;
begin
	result := 0;
	counter := 0;
	
	if (oCenterTarget = nil) then begin
		Print('GetCount_EnemiesNearTarget: ERROR - Centered target was not right.');
		exit;
	end;
	if (not ValidationFunc(oCenterTarget)) then begin
		Print('GetCount_EnemiesNearTarget: ERROR - Centered target was not valid.');
		exit;
	end;
	if (User.DistTo(oCenterTarget) > MaxRange)  then begin
		Print('GetCount_EnemiesNearTarget: ERROR - Centered target was too far away.');
		exit;
	end;

	mainDist := User.DistTo(oCenterTarget);
	
	if (IsCharTarget) then count := Charlist.Count
	else count := NpcList.Count;
		
	for i := 0 to count - 1 do begin
		if IsCharTarget then oTarget := CharList.Items(i)
		else oTarget := NpcList.Items(i);
			
		if (oTarget = nil) then continue;
		if (User.DistTo(oTarget) > mainDist + MaxRadius) then break;
			
		if not (ValidationFunc(oTarget)) then continue;
			
		if (oCenterTarget.DistTo(oTarget) < MaxRadius) then begin
			Inc(counter);
		end;
		
		if (IsCharTarget) then count := Charlist.Count
		else count := NpcList.Count;
	end;

	result := counter;
end;
	
function GetMillisecondsBetweenTimes(time1, time2: TDateTime): Cardinal;
var
time_to_ms: Cardinal;
begin
	//				ms	 sec  min  hour
	time_to_ms := 86400000; //; 1000 * 60 * 60 * 24 = 86 400 000
	result := abs ( Round( (time1 - time2) * time_to_ms ) );
end;
	
	
	
// -	Examples
function EvaluateTarget_ClosestLowest(oTarget: Tl2live): Array of Integer;
var
tempArray: Array of integer;
numberOfArgs, val: Integer;
begin
	result := nil;
	if (oTarget = nil) then exit;
	
	numberOfArgs := 2;
	
	SetLength(tempArray, numberOfArgs);
	
	//1st Arg - Range, closest first
	val := -User.DistTo(oTarget); //We use ( -1 * distance ) because highest evaluation is more important, so in inverted version, number closest to 0 is best
	tempArray[0] := val;
	
	//2nd Arg - Hp lowest first
	val := -oTarget.Hp; //We use ( -1 * HP ) because highest evaluation is more important, and we want lowest hit points
	tempArray[1] := val;
	
	result := tempArray;	
end;

function ValidateTarget_Valid(oTarget: Tl2live): Boolean;
begin
	result := false;

	if (oTarget = nil) then exit;
	
	//if (IsTarget_Valid(oTarget)) then begin
		//result := true;
	//end;
end;
	
	
end.