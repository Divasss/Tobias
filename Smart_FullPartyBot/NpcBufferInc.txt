uses
SysUtils, Classes;

var
NpcIdNum, NpcId, ConversationDelay: Cardinal;


function Validate_NpcIdNum(dialogText: string): Boolean;
var
searchString: string;
begin
	result := false;
	searchString := 'npc_' + IntToStr(NpcIdNum) + '_';
	if (Pos(searchString, dialogText) > 0) then begin
		result := true;
	end;
end;

function Set_NpcIdNum_FromInitialDialogWithBuffNpc: Boolean;
var
position: Integer;
sNumId: string;
temp: Cardinal;
begin
	position := pos('npc_', Engine.DlgText);

	sNumId := Copy(Engine.DlgText, position + 4, 9);

	temp := StrToIntDef(sNumId, 0);
	if (temp > 0) then begin
		NpcIdNum := temp;
	end;
end;



function SendChar(cLetter: string): Boolean;
var
nKeyCode: Integer;
begin
	result := false;
	nKeyCode := GetKeyCodeFromLetter(cLetter);
	if (nKeyCode < 0) then begin 
		Print('SendChar failed: The input character is not recognized. Input char = ' + cLetter);
	end;
	
	if (Engine.SendMessage($102 , nKeyCode , 0) = 0) then
		result := true
	else begin
		Print('SendChar failed. Could not send char = ' + cLetter);
		result := false;
	end;
end;

function GetKeyCodeFromLetter(cLetter: string): Integer;
begin
	result := -1;
	
	case cLetter of 
		'tab': result := 9;
		'enter': result := 13;
	
		'0': result := 48;
		'1': result := 49;
		'2': result := 50;
		'3': result := 51;
		'4': result := 52;
		'5': result := 53;
		'6': result := 54;
		'7': result := 55;
		'8': result := 56;
		'9': result := 57;
		
		'A': result := 65;
		'B': result := 66;
		'C': result := 67;
		'D': result := 68;
		'E': result := 69;
		'F': result := 70;
		'G': result := 71;
		'H': result := 72;
		'I': result := 73;
		'J': result := 74;
		'K': result := 75;
		'L': result := 76;
		'M': result := 77;
		'N': result := 78;
		'O': result := 79;
		'P': result := 80;
		'Q': result := 81;
		'R': result := 82;
		'S': result := 83;
		'T': result := 84;
		'U': result := 85;
		'V': result := 86;
		'W': result := 87;
		'X': result := 88;
		'Y': result := 89;
		'Z': result := 90;
		
		'a': result := 97;
		'b': result := 98;
		'c': result := 99;
		'd': result := 100;
		'e': result := 101;
		'f': result := 102;
		'g': result := 103;
		'h': result := 104;
		'i': result := 105;
		'j': result := 106;
		'k': result := 107;
		'l': result := 108;
		'm': result := 109;
		'n': result := 110;
		'o': result := 111;
		'p': result := 112;
		'q': result := 113;
		'r': result := 114;
		's': result := 115;
		't': result := 116;
		'u': result := 117;
		'v': result := 118;
		'w': result := 119;
		'x': result := 120;
		'y': result := 121;
		'z': result := 122;
	
		
	end;
end;

function SendString(sMessage: string): Boolean;
var
i: Integer;
begin
	result := false;
	Print('Attempt to send sring "' + sMessage + '" with length = ' + IntToStr(Length(sMessage)));
	for i := 1 to Length(sMessage) do begin
		Print('SendString: Letter ' + IntToStr(i) + ' = "' + sMessage[i] + '"');
		if not SendChar(sMessage[i]) then begin
			Print('SendString failed. String = ' + sMessage);
			exit;
		end;
	end;
	result := true;
end;

function CreateScheme(sName: string): Boolean;
begin
	result := false;
	Engine.SetTarget(NpcId);
	Delay(500);
	if Engine.DlgOpen() then begin
		Delay(ConversationDelay);
		Engine.DlgSel(1);
		Delay(ConversationDelay);
		Engine.BypassToServer('npc_' + IntToStr(NpcIdNum) + '_saveProfile_' + sName);
		Delay(ConversationDelay);
	end else begin
		result := false;
		exit;
	end;
	
	Engine.SetTarget(NpcId);
	Delay(500);
	if Engine.DlgOpen() then begin
		Delay(ConversationDelay);
		Engine.DlgSel(2);
		Delay(ConversationDelay);
		if (Pos(sName, Engine.DlgText) > 0) then begin
		  Engine.DlgOpen;
			Print('Bufflist with name "' + sName + '" was created successfully');
			result := true;
		end;
	end else begin
		result := false;
		exit;
	end;
	
	
end;

function AddBuffsToList(sListName: string; BuffList: Array of Integer): Boolean;
begin

//function AddBuffsToList_InCategory(sListName, sCategoeyName, sAddBuffInfix: string; BuffList: Array of Integer): Boolean;
	//dances 
	//sCategoeyName = showAvaliableDance
	//sAddBuffInfix = addDance
	AddBuffsToList_InCategory(sListName, 'showAvaliableDance', 'addDance', BuffList);
	AddBuffsToList_InCategory(sListName, 'showAvaliableSong', 'addSong', BuffList);
	AddBuffsToList_InCategory(sListName, 'showAvaliableProp', 'addProp', BuffList);
	AddBuffsToList_InCategory(sListName, 'showAvaliableElder', 'addElder', BuffList);
	AddBuffsToList_InCategory(sListName, 'showAvaliableChant', 'addChant', BuffList);
	AddBuffsToList_InCategory(sListName, 'showAvaliableOver', 'addOver', BuffList);
	AddBuffsToList_InCategory(sListName, 'showAvaliableDwarf', 'addDwarf', BuffList);
	AddBuffsToList_InCategory(sListName, 'showAvaliableMisc', 'addMisc', BuffList);
	Engine.DlgOpen;
	(*
	showAvaliableSong
	addSong
	
	
	showAvaliableProp
	addProp
	
	
	
	showAvaliableElder
	addElder
	
	
	
	showAvaliableChant
	addChant
	
	
	showAvaliableOver
	addOver
	
	
	showAvaliableDwarf
	addDwarf
	
	
	
	showAvaliableMisc
	addMisc
	
	*)
end;

function AddBuffsToList_InCategory(sListName, sCategoeyName, sAddBuffInfix: string; BuffList: Array of Integer): Boolean;
var
i, len, num: Integer;
DialogText, searchString: string;
begin
	result := false;
	if not OpenDialog then exit;
	
	Engine.DlgSel(3);
	Delay(ConversationDelay);
	Engine.BypassToServer('npc_' + IntToStr(NpcIdNum) + '_showProfiles_' + sCategoeyName);
	Delay(ConversationDelay);
	Engine.BypassToServer('npc_' + IntToStr(NpcIdNum) + '_' + sCategoeyName + '_' + sListName);
	Delay(ConversationDelay);
	DialogText := Engine.DlgText;
	
	len := Length(BuffList);
	if (len > 0) then begin
		for i := 0 to len - 1 do begin
			DialogText := Engine.DlgText;
			num := BuffList[i];
			searchString := 'npc_' + IntToStr(NpcIdNum) + '_' + sAddBuffInfix + '_' + sListName + '_' + IntToStr(num);
			if (Pos(searchString, DialogText) > 0) then begin
				Engine.BypassToServer(searchString);
				Delay(ConversationDelay);
			end;
			
			//npc_' + IntToStr(NpcIdNum) + '_addDance_PartyMage_366
		end;
	end;
	
end;

function OpenDialog: Boolean;
var
validationString: string;
begin
	result := false;
	if Engine.SetTarget(NpcId) then begin
		Delay(ConversationDelay);
		if (Engine.DlgOpen) then begin
			Delay(ConversationDelay);
			if not Validate_NpcIdNum(Engine.DlgText) then begin
				Set_NpcIdNum_FromInitialDialogWithBuffNpc;
				Print('Set buffer npc conversation id = ' + IntToStr(NpcIdNum));
			end;
			result := true;
		end;
	end;
end;

function GetBuffArrayFromStringList(BuffStringList: TStringList): Array of Integer;
var
tempList: Array Of Integer;
len, i, num, count: Integer;
begin
	result := nil;
	len := BuffStringList.Count;
	if (len < 1) then begin
		Print('GetBuffArrayFromStringList: Error, empty input');
		exit;
	end;
	
	
	SetLength(tempList, len);
	for i := 0 to len - 1 do begin
		num := StrToIntDef(BuffStringList[i], 0);
		tempList[i] := num;
	end;
	
	result := tempList;
end;

function TakeBuffs(fighterBuffs: Boolean): Boolean;
var
buffListName: string;
buffResult: Integer;
begin
	result := false;
	if Engine.MoveTo(147792, -56547, -2776) then begin
		if fighterBuffs then begin
			buffListName := 'PartyFighter';
		end else begin
			buffListName := 'PartyMage';
		end;
		
		buffResult := TakeBuffsFromList(buffListName);
		if (buffResult = 1) then begin
			Print('The buff list with name = "' + buffListName + '" was not found. Create it!');
			CreateBuffList(buffListName, fighterBuffs);
			result := TakeBuffs(fighterBuffs);
			exit;
		end else if (buffResult = 2) then begin
			result := true;
		end;
	end;
end;

function TakeBuffsFromList(sListName: string): Integer;
var
sBuffListString, DialogText: string;
position: Integer;
begin
	result := 0;
	if OpenDialog then begin
		Engine.DlgSel(5);
		Delay(ConversationDelay);
		
		sBuffListString := 'npc_' + IntToStr(NpcIdNum) + '_buffforme_' + sListName;
		DialogText := Engine.DlgText;
		
		position := Pos(sBuffListString, DialogText);
		if (position > 0) then begin
			Engine.BypassToServer(sBuffListString);
			Print('Took buffs.');
			result := 2;
		end else begin
			Print('Buff list with name = "' + sListName + '" is not found.');
			result := 1;
		end;
	end;
end;

function CreateBuffList(sListName: string; fighterBuffs: Boolean): Boolean;
var
buffList: TStringList;
buffArray: Array of Integer;
begin
	if fighterBuffs then
		print('Create a buff list with name = "' + sListName + '" and fill it with fighter buffs.')
	else
		print('Create a buff list with name = "' + sListName + '" and fill it with mage buffs.');

	CreateScheme(sListName);
	buffList := TStringList.Create;
	if fighterBuffs then
		buffList.LoadFromFile('Pvp_BuffList_Fighter.txt')
	else
		buffList.LoadFromFile('Pvp_BuffList_Mage.txt');
		
	buffArray := GetBuffArrayFromStringList(buffList);
	AddBuffsToList(sListName, buffArray);
end;

begin
	NpcIdNum := 0;
	NpcId := 32793;
	ConversationDelay := 800;

	TakeBuffs(true);

end.





